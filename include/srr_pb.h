// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srr.proto

#ifndef PROTOBUF_INCLUDED_srr_2eproto
#define PROTOBUF_INCLUDED_srr_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_srr_2eproto 

namespace protobuf_srr_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[19];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_srr_2eproto
namespace dto {
namespace srr {
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FeatureAndStatus;
class FeatureAndStatusDefaultTypeInternal;
extern FeatureAndStatusDefaultTypeInternal _FeatureAndStatus_default_instance_;
class FeatureDependencies;
class FeatureDependenciesDefaultTypeInternal;
extern FeatureDependenciesDefaultTypeInternal _FeatureDependencies_default_instance_;
class FeatureStatus;
class FeatureStatusDefaultTypeInternal;
extern FeatureStatusDefaultTypeInternal _FeatureStatus_default_instance_;
class ListFeatureQuery;
class ListFeatureQueryDefaultTypeInternal;
extern ListFeatureQueryDefaultTypeInternal _ListFeatureQuery_default_instance_;
class ListFeatureResponse;
class ListFeatureResponseDefaultTypeInternal;
extern ListFeatureResponseDefaultTypeInternal _ListFeatureResponse_default_instance_;
class ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse;
class ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUseDefaultTypeInternal;
extern ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUseDefaultTypeInternal _ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class ResetQuery;
class ResetQueryDefaultTypeInternal;
extern ResetQueryDefaultTypeInternal _ResetQuery_default_instance_;
class ResetResponse;
class ResetResponseDefaultTypeInternal;
extern ResetResponseDefaultTypeInternal _ResetResponse_default_instance_;
class ResetResponse_MapFeaturesStatusEntry_DoNotUse;
class ResetResponse_MapFeaturesStatusEntry_DoNotUseDefaultTypeInternal;
extern ResetResponse_MapFeaturesStatusEntry_DoNotUseDefaultTypeInternal _ResetResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class RestoreQuery;
class RestoreQueryDefaultTypeInternal;
extern RestoreQueryDefaultTypeInternal _RestoreQuery_default_instance_;
class RestoreQuery_MapFeaturesDataEntry_DoNotUse;
class RestoreQuery_MapFeaturesDataEntry_DoNotUseDefaultTypeInternal;
extern RestoreQuery_MapFeaturesDataEntry_DoNotUseDefaultTypeInternal _RestoreQuery_MapFeaturesDataEntry_DoNotUse_default_instance_;
class RestoreResponse;
class RestoreResponseDefaultTypeInternal;
extern RestoreResponseDefaultTypeInternal _RestoreResponse_default_instance_;
class RestoreResponse_MapFeaturesStatusEntry_DoNotUse;
class RestoreResponse_MapFeaturesStatusEntry_DoNotUseDefaultTypeInternal;
extern RestoreResponse_MapFeaturesStatusEntry_DoNotUseDefaultTypeInternal _RestoreResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_;
class SaveQuery;
class SaveQueryDefaultTypeInternal;
extern SaveQueryDefaultTypeInternal _SaveQuery_default_instance_;
class SaveResponse;
class SaveResponseDefaultTypeInternal;
extern SaveResponseDefaultTypeInternal _SaveResponse_default_instance_;
class SaveResponse_MapFeaturesDataEntry_DoNotUse;
class SaveResponse_MapFeaturesDataEntry_DoNotUseDefaultTypeInternal;
extern SaveResponse_MapFeaturesDataEntry_DoNotUseDefaultTypeInternal _SaveResponse_MapFeaturesDataEntry_DoNotUse_default_instance_;
}  // namespace srr
}  // namespace dto
namespace google {
namespace protobuf {
template<> ::dto::srr::Feature* Arena::CreateMaybeMessage<::dto::srr::Feature>(Arena*);
template<> ::dto::srr::FeatureAndStatus* Arena::CreateMaybeMessage<::dto::srr::FeatureAndStatus>(Arena*);
template<> ::dto::srr::FeatureDependencies* Arena::CreateMaybeMessage<::dto::srr::FeatureDependencies>(Arena*);
template<> ::dto::srr::FeatureStatus* Arena::CreateMaybeMessage<::dto::srr::FeatureStatus>(Arena*);
template<> ::dto::srr::ListFeatureQuery* Arena::CreateMaybeMessage<::dto::srr::ListFeatureQuery>(Arena*);
template<> ::dto::srr::ListFeatureResponse* Arena::CreateMaybeMessage<::dto::srr::ListFeatureResponse>(Arena*);
template<> ::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse* Arena::CreateMaybeMessage<::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse>(Arena*);
template<> ::dto::srr::Query* Arena::CreateMaybeMessage<::dto::srr::Query>(Arena*);
template<> ::dto::srr::ResetQuery* Arena::CreateMaybeMessage<::dto::srr::ResetQuery>(Arena*);
template<> ::dto::srr::ResetResponse* Arena::CreateMaybeMessage<::dto::srr::ResetResponse>(Arena*);
template<> ::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse>(Arena*);
template<> ::dto::srr::Response* Arena::CreateMaybeMessage<::dto::srr::Response>(Arena*);
template<> ::dto::srr::RestoreQuery* Arena::CreateMaybeMessage<::dto::srr::RestoreQuery>(Arena*);
template<> ::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse* Arena::CreateMaybeMessage<::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse>(Arena*);
template<> ::dto::srr::RestoreResponse* Arena::CreateMaybeMessage<::dto::srr::RestoreResponse>(Arena*);
template<> ::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse>(Arena*);
template<> ::dto::srr::SaveQuery* Arena::CreateMaybeMessage<::dto::srr::SaveQuery>(Arena*);
template<> ::dto::srr::SaveResponse* Arena::CreateMaybeMessage<::dto::srr::SaveResponse>(Arena*);
template<> ::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse* Arena::CreateMaybeMessage<::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dto {
namespace srr {

enum Status {
  UNKNOWN = 0,
  SUCCESS = 1,
  FAILED = 2,
  PARTIAL_SUCCESS = 3,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_IsValid(int value);
const Status Status_MIN = UNKNOWN;
const Status Status_MAX = PARTIAL_SUCCESS;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Feature* other);
  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const final {
    return CreateMaybeMessage<Feature>(NULL);
  }

  Feature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:dto.srr.Feature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeatureStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.FeatureStatus) */ {
 public:
  FeatureStatus();
  virtual ~FeatureStatus();

  FeatureStatus(const FeatureStatus& from);

  inline FeatureStatus& operator=(const FeatureStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureStatus(FeatureStatus&& from) noexcept
    : FeatureStatus() {
    *this = ::std::move(from);
  }

  inline FeatureStatus& operator=(FeatureStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureStatus* internal_default_instance() {
    return reinterpret_cast<const FeatureStatus*>(
               &_FeatureStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FeatureStatus* other);
  friend void swap(FeatureStatus& a, FeatureStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureStatus* New() const final {
    return CreateMaybeMessage<FeatureStatus>(NULL);
  }

  FeatureStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FeatureStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FeatureStatus& from);
  void MergeFrom(const FeatureStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // .dto.srr.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::dto::srr::Status status() const;
  void set_status(::dto::srr::Status value);

  // @@protoc_insertion_point(class_scope:dto.srr.FeatureStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SaveQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.SaveQuery) */ {
 public:
  SaveQuery();
  virtual ~SaveQuery();

  SaveQuery(const SaveQuery& from);

  inline SaveQuery& operator=(const SaveQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveQuery(SaveQuery&& from) noexcept
    : SaveQuery() {
    *this = ::std::move(from);
  }

  inline SaveQuery& operator=(SaveQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveQuery* internal_default_instance() {
    return reinterpret_cast<const SaveQuery*>(
               &_SaveQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SaveQuery* other);
  friend void swap(SaveQuery& a, SaveQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveQuery* New() const final {
    return CreateMaybeMessage<SaveQuery>(NULL);
  }

  SaveQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveQuery& from);
  void MergeFrom(const SaveQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string features = 1;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  const ::std::string& features(int index) const;
  ::std::string* mutable_features(int index);
  void set_features(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_features(int index, ::std::string&& value);
  #endif
  void set_features(int index, const char* value);
  void set_features(int index, const char* value, size_t size);
  ::std::string* add_features();
  void add_features(const ::std::string& value);
  #if LANG_CXX11
  void add_features(::std::string&& value);
  #endif
  void add_features(const char* value);
  void add_features(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& features() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_features();

  // string passpharse = 2;
  void clear_passpharse();
  static const int kPasspharseFieldNumber = 2;
  const ::std::string& passpharse() const;
  void set_passpharse(const ::std::string& value);
  #if LANG_CXX11
  void set_passpharse(::std::string&& value);
  #endif
  void set_passpharse(const char* value);
  void set_passpharse(const char* value, size_t size);
  ::std::string* mutable_passpharse();
  ::std::string* release_passpharse();
  void set_allocated_passpharse(::std::string* passpharse);

  // @@protoc_insertion_point(class_scope:dto.srr.SaveQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> features_;
  ::google::protobuf::internal::ArenaStringPtr passpharse_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RestoreQuery_MapFeaturesDataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RestoreQuery_MapFeaturesDataEntry_DoNotUse, 
    ::std::string, ::dto::srr::Feature,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RestoreQuery_MapFeaturesDataEntry_DoNotUse, 
    ::std::string, ::dto::srr::Feature,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RestoreQuery_MapFeaturesDataEntry_DoNotUse();
  RestoreQuery_MapFeaturesDataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RestoreQuery_MapFeaturesDataEntry_DoNotUse& other);
  static const RestoreQuery_MapFeaturesDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RestoreQuery_MapFeaturesDataEntry_DoNotUse*>(&_RestoreQuery_MapFeaturesDataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RestoreQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.RestoreQuery) */ {
 public:
  RestoreQuery();
  virtual ~RestoreQuery();

  RestoreQuery(const RestoreQuery& from);

  inline RestoreQuery& operator=(const RestoreQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RestoreQuery(RestoreQuery&& from) noexcept
    : RestoreQuery() {
    *this = ::std::move(from);
  }

  inline RestoreQuery& operator=(RestoreQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RestoreQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreQuery* internal_default_instance() {
    return reinterpret_cast<const RestoreQuery*>(
               &_RestoreQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RestoreQuery* other);
  friend void swap(RestoreQuery& a, RestoreQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RestoreQuery* New() const final {
    return CreateMaybeMessage<RestoreQuery>(NULL);
  }

  RestoreQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RestoreQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RestoreQuery& from);
  void MergeFrom(const RestoreQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .dto.srr.Feature> map_features_data = 1;
  int map_features_data_size() const;
  void clear_map_features_data();
  static const int kMapFeaturesDataFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::dto::srr::Feature >&
      map_features_data() const;
  ::google::protobuf::Map< ::std::string, ::dto::srr::Feature >*
      mutable_map_features_data();

  // string passpharse = 2;
  void clear_passpharse();
  static const int kPasspharseFieldNumber = 2;
  const ::std::string& passpharse() const;
  void set_passpharse(const ::std::string& value);
  #if LANG_CXX11
  void set_passpharse(::std::string&& value);
  #endif
  void set_passpharse(const char* value);
  void set_passpharse(const char* value, size_t size);
  ::std::string* mutable_passpharse();
  ::std::string* release_passpharse();
  void set_allocated_passpharse(::std::string* passpharse);

  // string version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string checksum = 4;
  void clear_checksum();
  static const int kChecksumFieldNumber = 4;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum(::std::string&& value);
  #endif
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // @@protoc_insertion_point(class_scope:dto.srr.RestoreQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RestoreQuery_MapFeaturesDataEntry_DoNotUse,
      ::std::string, ::dto::srr::Feature,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_features_data_;
  ::google::protobuf::internal::ArenaStringPtr passpharse_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.ResetQuery) */ {
 public:
  ResetQuery();
  virtual ~ResetQuery();

  ResetQuery(const ResetQuery& from);

  inline ResetQuery& operator=(const ResetQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetQuery(ResetQuery&& from) noexcept
    : ResetQuery() {
    *this = ::std::move(from);
  }

  inline ResetQuery& operator=(ResetQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetQuery* internal_default_instance() {
    return reinterpret_cast<const ResetQuery*>(
               &_ResetQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ResetQuery* other);
  friend void swap(ResetQuery& a, ResetQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetQuery* New() const final {
    return CreateMaybeMessage<ResetQuery>(NULL);
  }

  ResetQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetQuery& from);
  void MergeFrom(const ResetQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string features = 1;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  const ::std::string& features(int index) const;
  ::std::string* mutable_features(int index);
  void set_features(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_features(int index, ::std::string&& value);
  #endif
  void set_features(int index, const char* value);
  void set_features(int index, const char* value, size_t size);
  ::std::string* add_features();
  void add_features(const ::std::string& value);
  #if LANG_CXX11
  void add_features(::std::string&& value);
  #endif
  void add_features(const char* value);
  void add_features(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& features() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_features();

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:dto.srr.ResetQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> features_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListFeatureQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.ListFeatureQuery) */ {
 public:
  ListFeatureQuery();
  virtual ~ListFeatureQuery();

  ListFeatureQuery(const ListFeatureQuery& from);

  inline ListFeatureQuery& operator=(const ListFeatureQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFeatureQuery(ListFeatureQuery&& from) noexcept
    : ListFeatureQuery() {
    *this = ::std::move(from);
  }

  inline ListFeatureQuery& operator=(ListFeatureQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFeatureQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFeatureQuery* internal_default_instance() {
    return reinterpret_cast<const ListFeatureQuery*>(
               &_ListFeatureQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ListFeatureQuery* other);
  friend void swap(ListFeatureQuery& a, ListFeatureQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFeatureQuery* New() const final {
    return CreateMaybeMessage<ListFeatureQuery>(NULL);
  }

  ListFeatureQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListFeatureQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListFeatureQuery& from);
  void MergeFrom(const ListFeatureQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFeatureQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dto.srr.ListFeatureQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  enum ParametersCase {
    kSave = 1,
    kRestore = 2,
    kReset = 3,
    kListFeature = 4,
    PARAMETERS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(NULL);
  }

  Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dto.srr.SaveQuery save = 1;
  bool has_save() const;
  void clear_save();
  static const int kSaveFieldNumber = 1;
  private:
  const ::dto::srr::SaveQuery& _internal_save() const;
  public:
  const ::dto::srr::SaveQuery& save() const;
  ::dto::srr::SaveQuery* release_save();
  ::dto::srr::SaveQuery* mutable_save();
  void set_allocated_save(::dto::srr::SaveQuery* save);

  // .dto.srr.RestoreQuery restore = 2;
  bool has_restore() const;
  void clear_restore();
  static const int kRestoreFieldNumber = 2;
  private:
  const ::dto::srr::RestoreQuery& _internal_restore() const;
  public:
  const ::dto::srr::RestoreQuery& restore() const;
  ::dto::srr::RestoreQuery* release_restore();
  ::dto::srr::RestoreQuery* mutable_restore();
  void set_allocated_restore(::dto::srr::RestoreQuery* restore);

  // .dto.srr.ResetQuery reset = 3;
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 3;
  private:
  const ::dto::srr::ResetQuery& _internal_reset() const;
  public:
  const ::dto::srr::ResetQuery& reset() const;
  ::dto::srr::ResetQuery* release_reset();
  ::dto::srr::ResetQuery* mutable_reset();
  void set_allocated_reset(::dto::srr::ResetQuery* reset);

  // .dto.srr.ListFeatureQuery list_feature = 4;
  bool has_list_feature() const;
  void clear_list_feature();
  static const int kListFeatureFieldNumber = 4;
  private:
  const ::dto::srr::ListFeatureQuery& _internal_list_feature() const;
  public:
  const ::dto::srr::ListFeatureQuery& list_feature() const;
  ::dto::srr::ListFeatureQuery* release_list_feature();
  ::dto::srr::ListFeatureQuery* mutable_list_feature();
  void set_allocated_list_feature(::dto::srr::ListFeatureQuery* list_feature);

  void clear_parameters();
  ParametersCase parameters_case() const;
  // @@protoc_insertion_point(class_scope:dto.srr.Query)
 private:
  void set_has_save();
  void set_has_restore();
  void set_has_reset();
  void set_has_list_feature();

  inline bool has_parameters() const;
  inline void clear_has_parameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ParametersUnion {
    ParametersUnion() {}
    ::dto::srr::SaveQuery* save_;
    ::dto::srr::RestoreQuery* restore_;
    ::dto::srr::ResetQuery* reset_;
    ::dto::srr::ListFeatureQuery* list_feature_;
  } parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeatureAndStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.FeatureAndStatus) */ {
 public:
  FeatureAndStatus();
  virtual ~FeatureAndStatus();

  FeatureAndStatus(const FeatureAndStatus& from);

  inline FeatureAndStatus& operator=(const FeatureAndStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureAndStatus(FeatureAndStatus&& from) noexcept
    : FeatureAndStatus() {
    *this = ::std::move(from);
  }

  inline FeatureAndStatus& operator=(FeatureAndStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureAndStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureAndStatus* internal_default_instance() {
    return reinterpret_cast<const FeatureAndStatus*>(
               &_FeatureAndStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FeatureAndStatus* other);
  friend void swap(FeatureAndStatus& a, FeatureAndStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureAndStatus* New() const final {
    return CreateMaybeMessage<FeatureAndStatus>(NULL);
  }

  FeatureAndStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FeatureAndStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FeatureAndStatus& from);
  void MergeFrom(const FeatureAndStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureAndStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dto.srr.FeatureStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::dto::srr::FeatureStatus& _internal_status() const;
  public:
  const ::dto::srr::FeatureStatus& status() const;
  ::dto::srr::FeatureStatus* release_status();
  ::dto::srr::FeatureStatus* mutable_status();
  void set_allocated_status(::dto::srr::FeatureStatus* status);

  // .dto.srr.Feature feature = 2;
  bool has_feature() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  private:
  const ::dto::srr::Feature& _internal_feature() const;
  public:
  const ::dto::srr::Feature& feature() const;
  ::dto::srr::Feature* release_feature();
  ::dto::srr::Feature* mutable_feature();
  void set_allocated_feature(::dto::srr::Feature* feature);

  // @@protoc_insertion_point(class_scope:dto.srr.FeatureAndStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dto::srr::FeatureStatus* status_;
  ::dto::srr::Feature* feature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SaveResponse_MapFeaturesDataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SaveResponse_MapFeaturesDataEntry_DoNotUse, 
    ::std::string, ::dto::srr::FeatureAndStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SaveResponse_MapFeaturesDataEntry_DoNotUse, 
    ::std::string, ::dto::srr::FeatureAndStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SaveResponse_MapFeaturesDataEntry_DoNotUse();
  SaveResponse_MapFeaturesDataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SaveResponse_MapFeaturesDataEntry_DoNotUse& other);
  static const SaveResponse_MapFeaturesDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SaveResponse_MapFeaturesDataEntry_DoNotUse*>(&_SaveResponse_MapFeaturesDataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SaveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.SaveResponse) */ {
 public:
  SaveResponse();
  virtual ~SaveResponse();

  SaveResponse(const SaveResponse& from);

  inline SaveResponse& operator=(const SaveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveResponse(SaveResponse&& from) noexcept
    : SaveResponse() {
    *this = ::std::move(from);
  }

  inline SaveResponse& operator=(SaveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveResponse* internal_default_instance() {
    return reinterpret_cast<const SaveResponse*>(
               &_SaveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SaveResponse* other);
  friend void swap(SaveResponse& a, SaveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveResponse* New() const final {
    return CreateMaybeMessage<SaveResponse>(NULL);
  }

  SaveResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveResponse& from);
  void MergeFrom(const SaveResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .dto.srr.FeatureAndStatus> map_features_data = 1;
  int map_features_data_size() const;
  void clear_map_features_data();
  static const int kMapFeaturesDataFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureAndStatus >&
      map_features_data() const;
  ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureAndStatus >*
      mutable_map_features_data();

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string checksum = 3;
  void clear_checksum();
  static const int kChecksumFieldNumber = 3;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum(::std::string&& value);
  #endif
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // .dto.srr.FeatureStatus status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  private:
  const ::dto::srr::FeatureStatus& _internal_status() const;
  public:
  const ::dto::srr::FeatureStatus& status() const;
  ::dto::srr::FeatureStatus* release_status();
  ::dto::srr::FeatureStatus* mutable_status();
  void set_allocated_status(::dto::srr::FeatureStatus* status);

  // @@protoc_insertion_point(class_scope:dto.srr.SaveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SaveResponse_MapFeaturesDataEntry_DoNotUse,
      ::std::string, ::dto::srr::FeatureAndStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_features_data_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  ::dto::srr::FeatureStatus* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RestoreResponse_MapFeaturesStatusEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RestoreResponse_MapFeaturesStatusEntry_DoNotUse, 
    ::std::string, ::dto::srr::FeatureStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RestoreResponse_MapFeaturesStatusEntry_DoNotUse, 
    ::std::string, ::dto::srr::FeatureStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RestoreResponse_MapFeaturesStatusEntry_DoNotUse();
  RestoreResponse_MapFeaturesStatusEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RestoreResponse_MapFeaturesStatusEntry_DoNotUse& other);
  static const RestoreResponse_MapFeaturesStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RestoreResponse_MapFeaturesStatusEntry_DoNotUse*>(&_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RestoreResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.RestoreResponse) */ {
 public:
  RestoreResponse();
  virtual ~RestoreResponse();

  RestoreResponse(const RestoreResponse& from);

  inline RestoreResponse& operator=(const RestoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RestoreResponse(RestoreResponse&& from) noexcept
    : RestoreResponse() {
    *this = ::std::move(from);
  }

  inline RestoreResponse& operator=(RestoreResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RestoreResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreResponse* internal_default_instance() {
    return reinterpret_cast<const RestoreResponse*>(
               &_RestoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RestoreResponse* other);
  friend void swap(RestoreResponse& a, RestoreResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RestoreResponse* New() const final {
    return CreateMaybeMessage<RestoreResponse>(NULL);
  }

  RestoreResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RestoreResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RestoreResponse& from);
  void MergeFrom(const RestoreResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .dto.srr.FeatureStatus> map_features_status = 1;
  int map_features_status_size() const;
  void clear_map_features_status();
  static const int kMapFeaturesStatusFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureStatus >&
      map_features_status() const;
  ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureStatus >*
      mutable_map_features_status();

  // .dto.srr.FeatureStatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  const ::dto::srr::FeatureStatus& _internal_status() const;
  public:
  const ::dto::srr::FeatureStatus& status() const;
  ::dto::srr::FeatureStatus* release_status();
  ::dto::srr::FeatureStatus* mutable_status();
  void set_allocated_status(::dto::srr::FeatureStatus* status);

  // @@protoc_insertion_point(class_scope:dto.srr.RestoreResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RestoreResponse_MapFeaturesStatusEntry_DoNotUse,
      ::std::string, ::dto::srr::FeatureStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_features_status_;
  ::dto::srr::FeatureStatus* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetResponse_MapFeaturesStatusEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ResetResponse_MapFeaturesStatusEntry_DoNotUse, 
    ::std::string, ::dto::srr::FeatureStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ResetResponse_MapFeaturesStatusEntry_DoNotUse, 
    ::std::string, ::dto::srr::FeatureStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ResetResponse_MapFeaturesStatusEntry_DoNotUse();
  ResetResponse_MapFeaturesStatusEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ResetResponse_MapFeaturesStatusEntry_DoNotUse& other);
  static const ResetResponse_MapFeaturesStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ResetResponse_MapFeaturesStatusEntry_DoNotUse*>(&_ResetResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ResetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.ResetResponse) */ {
 public:
  ResetResponse();
  virtual ~ResetResponse();

  ResetResponse(const ResetResponse& from);

  inline ResetResponse& operator=(const ResetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetResponse(ResetResponse&& from) noexcept
    : ResetResponse() {
    *this = ::std::move(from);
  }

  inline ResetResponse& operator=(ResetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetResponse* internal_default_instance() {
    return reinterpret_cast<const ResetResponse*>(
               &_ResetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ResetResponse* other);
  friend void swap(ResetResponse& a, ResetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetResponse* New() const final {
    return CreateMaybeMessage<ResetResponse>(NULL);
  }

  ResetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetResponse& from);
  void MergeFrom(const ResetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .dto.srr.FeatureStatus> map_features_status = 1;
  int map_features_status_size() const;
  void clear_map_features_status();
  static const int kMapFeaturesStatusFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureStatus >&
      map_features_status() const;
  ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureStatus >*
      mutable_map_features_status();

  // @@protoc_insertion_point(class_scope:dto.srr.ResetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ResetResponse_MapFeaturesStatusEntry_DoNotUse,
      ::std::string, ::dto::srr::FeatureStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_features_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeatureDependencies : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.FeatureDependencies) */ {
 public:
  FeatureDependencies();
  virtual ~FeatureDependencies();

  FeatureDependencies(const FeatureDependencies& from);

  inline FeatureDependencies& operator=(const FeatureDependencies& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureDependencies(FeatureDependencies&& from) noexcept
    : FeatureDependencies() {
    *this = ::std::move(from);
  }

  inline FeatureDependencies& operator=(FeatureDependencies&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureDependencies& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureDependencies* internal_default_instance() {
    return reinterpret_cast<const FeatureDependencies*>(
               &_FeatureDependencies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(FeatureDependencies* other);
  friend void swap(FeatureDependencies& a, FeatureDependencies& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureDependencies* New() const final {
    return CreateMaybeMessage<FeatureDependencies>(NULL);
  }

  FeatureDependencies* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FeatureDependencies>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FeatureDependencies& from);
  void MergeFrom(const FeatureDependencies& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureDependencies* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dependencies = 1;
  int dependencies_size() const;
  void clear_dependencies();
  static const int kDependenciesFieldNumber = 1;
  const ::std::string& dependencies(int index) const;
  ::std::string* mutable_dependencies(int index);
  void set_dependencies(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dependencies(int index, ::std::string&& value);
  #endif
  void set_dependencies(int index, const char* value);
  void set_dependencies(int index, const char* value, size_t size);
  ::std::string* add_dependencies();
  void add_dependencies(const ::std::string& value);
  #if LANG_CXX11
  void add_dependencies(::std::string&& value);
  #endif
  void add_dependencies(const char* value);
  void add_dependencies(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dependencies() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dependencies();

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:dto.srr.FeatureDependencies)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dependencies_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse, 
    ::std::string, ::dto::srr::FeatureDependencies,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse, 
    ::std::string, ::dto::srr::FeatureDependencies,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse();
  ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse& other);
  static const ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse*>(&_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ListFeatureResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.ListFeatureResponse) */ {
 public:
  ListFeatureResponse();
  virtual ~ListFeatureResponse();

  ListFeatureResponse(const ListFeatureResponse& from);

  inline ListFeatureResponse& operator=(const ListFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFeatureResponse(ListFeatureResponse&& from) noexcept
    : ListFeatureResponse() {
    *this = ::std::move(from);
  }

  inline ListFeatureResponse& operator=(ListFeatureResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFeatureResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const ListFeatureResponse*>(
               &_ListFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ListFeatureResponse* other);
  friend void swap(ListFeatureResponse& a, ListFeatureResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFeatureResponse* New() const final {
    return CreateMaybeMessage<ListFeatureResponse>(NULL);
  }

  ListFeatureResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListFeatureResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListFeatureResponse& from);
  void MergeFrom(const ListFeatureResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFeatureResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .dto.srr.FeatureDependencies> map_features_dependencies = 1;
  int map_features_dependencies_size() const;
  void clear_map_features_dependencies();
  static const int kMapFeaturesDependenciesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureDependencies >&
      map_features_dependencies() const;
  ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureDependencies >*
      mutable_map_features_dependencies();

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string passphrass_definition = 3;
  void clear_passphrass_definition();
  static const int kPassphrassDefinitionFieldNumber = 3;
  const ::std::string& passphrass_definition() const;
  void set_passphrass_definition(const ::std::string& value);
  #if LANG_CXX11
  void set_passphrass_definition(::std::string&& value);
  #endif
  void set_passphrass_definition(const char* value);
  void set_passphrass_definition(const char* value, size_t size);
  ::std::string* mutable_passphrass_definition();
  ::std::string* release_passphrass_definition();
  void set_allocated_passphrass_definition(::std::string* passphrass_definition);

  // string passphrass_description = 4;
  void clear_passphrass_description();
  static const int kPassphrassDescriptionFieldNumber = 4;
  const ::std::string& passphrass_description() const;
  void set_passphrass_description(const ::std::string& value);
  #if LANG_CXX11
  void set_passphrass_description(::std::string&& value);
  #endif
  void set_passphrass_description(const char* value);
  void set_passphrass_description(const char* value, size_t size);
  ::std::string* mutable_passphrass_description();
  ::std::string* release_passphrass_description();
  void set_allocated_passphrass_description(::std::string* passphrass_description);

  // @@protoc_insertion_point(class_scope:dto.srr.ListFeatureResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse,
      ::std::string, ::dto::srr::FeatureDependencies,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_features_dependencies_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr passphrass_definition_;
  ::google::protobuf::internal::ArenaStringPtr passphrass_description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.srr.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum ParametersCase {
    kSave = 1,
    kRestore = 2,
    kReset = 3,
    kListFeature = 4,
    PARAMETERS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dto.srr.SaveResponse save = 1;
  bool has_save() const;
  void clear_save();
  static const int kSaveFieldNumber = 1;
  private:
  const ::dto::srr::SaveResponse& _internal_save() const;
  public:
  const ::dto::srr::SaveResponse& save() const;
  ::dto::srr::SaveResponse* release_save();
  ::dto::srr::SaveResponse* mutable_save();
  void set_allocated_save(::dto::srr::SaveResponse* save);

  // .dto.srr.RestoreResponse restore = 2;
  bool has_restore() const;
  void clear_restore();
  static const int kRestoreFieldNumber = 2;
  private:
  const ::dto::srr::RestoreResponse& _internal_restore() const;
  public:
  const ::dto::srr::RestoreResponse& restore() const;
  ::dto::srr::RestoreResponse* release_restore();
  ::dto::srr::RestoreResponse* mutable_restore();
  void set_allocated_restore(::dto::srr::RestoreResponse* restore);

  // .dto.srr.ResetResponse reset = 3;
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 3;
  private:
  const ::dto::srr::ResetResponse& _internal_reset() const;
  public:
  const ::dto::srr::ResetResponse& reset() const;
  ::dto::srr::ResetResponse* release_reset();
  ::dto::srr::ResetResponse* mutable_reset();
  void set_allocated_reset(::dto::srr::ResetResponse* reset);

  // .dto.srr.ListFeatureResponse list_feature = 4;
  bool has_list_feature() const;
  void clear_list_feature();
  static const int kListFeatureFieldNumber = 4;
  private:
  const ::dto::srr::ListFeatureResponse& _internal_list_feature() const;
  public:
  const ::dto::srr::ListFeatureResponse& list_feature() const;
  ::dto::srr::ListFeatureResponse* release_list_feature();
  ::dto::srr::ListFeatureResponse* mutable_list_feature();
  void set_allocated_list_feature(::dto::srr::ListFeatureResponse* list_feature);

  void clear_parameters();
  ParametersCase parameters_case() const;
  // @@protoc_insertion_point(class_scope:dto.srr.Response)
 private:
  void set_has_save();
  void set_has_restore();
  void set_has_reset();
  void set_has_list_feature();

  inline bool has_parameters() const;
  inline void clear_has_parameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ParametersUnion {
    ParametersUnion() {}
    ::dto::srr::SaveResponse* save_;
    ::dto::srr::RestoreResponse* restore_;
    ::dto::srr::ResetResponse* reset_;
    ::dto::srr::ListFeatureResponse* list_feature_;
  } parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_srr_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Feature

// string version = 1;
inline void Feature::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::version() const {
  // @@protoc_insertion_point(field_get:dto.srr.Feature.version)
  return version_.GetNoArena();
}
inline void Feature::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.Feature.version)
}
#if LANG_CXX11
inline void Feature::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.Feature.version)
}
#endif
inline void Feature::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.Feature.version)
}
inline void Feature::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.Feature.version)
}
inline ::std::string* Feature::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.Feature.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_version() {
  // @@protoc_insertion_point(field_release:dto.srr.Feature.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Feature.version)
}

// string data = 2;
inline void Feature::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::data() const {
  // @@protoc_insertion_point(field_get:dto.srr.Feature.data)
  return data_.GetNoArena();
}
inline void Feature::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.Feature.data)
}
#if LANG_CXX11
inline void Feature::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.Feature.data)
}
#endif
inline void Feature::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.Feature.data)
}
inline void Feature::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.Feature.data)
}
inline ::std::string* Feature::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.Feature.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_data() {
  // @@protoc_insertion_point(field_release:dto.srr.Feature.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Feature.data)
}

// -------------------------------------------------------------------

// FeatureStatus

// .dto.srr.Status status = 1;
inline void FeatureStatus::clear_status() {
  status_ = 0;
}
inline ::dto::srr::Status FeatureStatus::status() const {
  // @@protoc_insertion_point(field_get:dto.srr.FeatureStatus.status)
  return static_cast< ::dto::srr::Status >(status_);
}
inline void FeatureStatus::set_status(::dto::srr::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dto.srr.FeatureStatus.status)
}

// string error = 2;
inline void FeatureStatus::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureStatus::error() const {
  // @@protoc_insertion_point(field_get:dto.srr.FeatureStatus.error)
  return error_.GetNoArena();
}
inline void FeatureStatus::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.FeatureStatus.error)
}
#if LANG_CXX11
inline void FeatureStatus::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.FeatureStatus.error)
}
#endif
inline void FeatureStatus::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.FeatureStatus.error)
}
inline void FeatureStatus::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.FeatureStatus.error)
}
inline ::std::string* FeatureStatus::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.FeatureStatus.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureStatus::release_error() {
  // @@protoc_insertion_point(field_release:dto.srr.FeatureStatus.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureStatus::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.FeatureStatus.error)
}

// -------------------------------------------------------------------

// SaveQuery

// repeated string features = 1;
inline int SaveQuery::features_size() const {
  return features_.size();
}
inline void SaveQuery::clear_features() {
  features_.Clear();
}
inline const ::std::string& SaveQuery::features(int index) const {
  // @@protoc_insertion_point(field_get:dto.srr.SaveQuery.features)
  return features_.Get(index);
}
inline ::std::string* SaveQuery::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:dto.srr.SaveQuery.features)
  return features_.Mutable(index);
}
inline void SaveQuery::set_features(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dto.srr.SaveQuery.features)
  features_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SaveQuery::set_features(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dto.srr.SaveQuery.features)
  features_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SaveQuery::set_features(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dto.srr.SaveQuery.features)
}
inline void SaveQuery::set_features(int index, const char* value, size_t size) {
  features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dto.srr.SaveQuery.features)
}
inline ::std::string* SaveQuery::add_features() {
  // @@protoc_insertion_point(field_add_mutable:dto.srr.SaveQuery.features)
  return features_.Add();
}
inline void SaveQuery::add_features(const ::std::string& value) {
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dto.srr.SaveQuery.features)
}
#if LANG_CXX11
inline void SaveQuery::add_features(::std::string&& value) {
  features_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dto.srr.SaveQuery.features)
}
#endif
inline void SaveQuery::add_features(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dto.srr.SaveQuery.features)
}
inline void SaveQuery::add_features(const char* value, size_t size) {
  features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dto.srr.SaveQuery.features)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SaveQuery::features() const {
  // @@protoc_insertion_point(field_list:dto.srr.SaveQuery.features)
  return features_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SaveQuery::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:dto.srr.SaveQuery.features)
  return &features_;
}

// string passpharse = 2;
inline void SaveQuery::clear_passpharse() {
  passpharse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveQuery::passpharse() const {
  // @@protoc_insertion_point(field_get:dto.srr.SaveQuery.passpharse)
  return passpharse_.GetNoArena();
}
inline void SaveQuery::set_passpharse(const ::std::string& value) {
  
  passpharse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.SaveQuery.passpharse)
}
#if LANG_CXX11
inline void SaveQuery::set_passpharse(::std::string&& value) {
  
  passpharse_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.SaveQuery.passpharse)
}
#endif
inline void SaveQuery::set_passpharse(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passpharse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.SaveQuery.passpharse)
}
inline void SaveQuery::set_passpharse(const char* value, size_t size) {
  
  passpharse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.SaveQuery.passpharse)
}
inline ::std::string* SaveQuery::mutable_passpharse() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.SaveQuery.passpharse)
  return passpharse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveQuery::release_passpharse() {
  // @@protoc_insertion_point(field_release:dto.srr.SaveQuery.passpharse)
  
  return passpharse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveQuery::set_allocated_passpharse(::std::string* passpharse) {
  if (passpharse != NULL) {
    
  } else {
    
  }
  passpharse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passpharse);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.SaveQuery.passpharse)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RestoreQuery

// map<string, .dto.srr.Feature> map_features_data = 1;
inline int RestoreQuery::map_features_data_size() const {
  return map_features_data_.size();
}
inline void RestoreQuery::clear_map_features_data() {
  map_features_data_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::dto::srr::Feature >&
RestoreQuery::map_features_data() const {
  // @@protoc_insertion_point(field_map:dto.srr.RestoreQuery.map_features_data)
  return map_features_data_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::dto::srr::Feature >*
RestoreQuery::mutable_map_features_data() {
  // @@protoc_insertion_point(field_mutable_map:dto.srr.RestoreQuery.map_features_data)
  return map_features_data_.MutableMap();
}

// string passpharse = 2;
inline void RestoreQuery::clear_passpharse() {
  passpharse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestoreQuery::passpharse() const {
  // @@protoc_insertion_point(field_get:dto.srr.RestoreQuery.passpharse)
  return passpharse_.GetNoArena();
}
inline void RestoreQuery::set_passpharse(const ::std::string& value) {
  
  passpharse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.RestoreQuery.passpharse)
}
#if LANG_CXX11
inline void RestoreQuery::set_passpharse(::std::string&& value) {
  
  passpharse_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.RestoreQuery.passpharse)
}
#endif
inline void RestoreQuery::set_passpharse(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passpharse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.RestoreQuery.passpharse)
}
inline void RestoreQuery::set_passpharse(const char* value, size_t size) {
  
  passpharse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.RestoreQuery.passpharse)
}
inline ::std::string* RestoreQuery::mutable_passpharse() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.RestoreQuery.passpharse)
  return passpharse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestoreQuery::release_passpharse() {
  // @@protoc_insertion_point(field_release:dto.srr.RestoreQuery.passpharse)
  
  return passpharse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestoreQuery::set_allocated_passpharse(::std::string* passpharse) {
  if (passpharse != NULL) {
    
  } else {
    
  }
  passpharse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passpharse);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.RestoreQuery.passpharse)
}

// string version = 3;
inline void RestoreQuery::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestoreQuery::version() const {
  // @@protoc_insertion_point(field_get:dto.srr.RestoreQuery.version)
  return version_.GetNoArena();
}
inline void RestoreQuery::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.RestoreQuery.version)
}
#if LANG_CXX11
inline void RestoreQuery::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.RestoreQuery.version)
}
#endif
inline void RestoreQuery::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.RestoreQuery.version)
}
inline void RestoreQuery::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.RestoreQuery.version)
}
inline ::std::string* RestoreQuery::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.RestoreQuery.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestoreQuery::release_version() {
  // @@protoc_insertion_point(field_release:dto.srr.RestoreQuery.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestoreQuery::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.RestoreQuery.version)
}

// string checksum = 4;
inline void RestoreQuery::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestoreQuery::checksum() const {
  // @@protoc_insertion_point(field_get:dto.srr.RestoreQuery.checksum)
  return checksum_.GetNoArena();
}
inline void RestoreQuery::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.RestoreQuery.checksum)
}
#if LANG_CXX11
inline void RestoreQuery::set_checksum(::std::string&& value) {
  
  checksum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.RestoreQuery.checksum)
}
#endif
inline void RestoreQuery::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.RestoreQuery.checksum)
}
inline void RestoreQuery::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.RestoreQuery.checksum)
}
inline ::std::string* RestoreQuery::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.RestoreQuery.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestoreQuery::release_checksum() {
  // @@protoc_insertion_point(field_release:dto.srr.RestoreQuery.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestoreQuery::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.RestoreQuery.checksum)
}

// -------------------------------------------------------------------

// ResetQuery

// repeated string features = 1;
inline int ResetQuery::features_size() const {
  return features_.size();
}
inline void ResetQuery::clear_features() {
  features_.Clear();
}
inline const ::std::string& ResetQuery::features(int index) const {
  // @@protoc_insertion_point(field_get:dto.srr.ResetQuery.features)
  return features_.Get(index);
}
inline ::std::string* ResetQuery::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:dto.srr.ResetQuery.features)
  return features_.Mutable(index);
}
inline void ResetQuery::set_features(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dto.srr.ResetQuery.features)
  features_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResetQuery::set_features(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dto.srr.ResetQuery.features)
  features_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResetQuery::set_features(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dto.srr.ResetQuery.features)
}
inline void ResetQuery::set_features(int index, const char* value, size_t size) {
  features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dto.srr.ResetQuery.features)
}
inline ::std::string* ResetQuery::add_features() {
  // @@protoc_insertion_point(field_add_mutable:dto.srr.ResetQuery.features)
  return features_.Add();
}
inline void ResetQuery::add_features(const ::std::string& value) {
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dto.srr.ResetQuery.features)
}
#if LANG_CXX11
inline void ResetQuery::add_features(::std::string&& value) {
  features_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dto.srr.ResetQuery.features)
}
#endif
inline void ResetQuery::add_features(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dto.srr.ResetQuery.features)
}
inline void ResetQuery::add_features(const char* value, size_t size) {
  features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dto.srr.ResetQuery.features)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetQuery::features() const {
  // @@protoc_insertion_point(field_list:dto.srr.ResetQuery.features)
  return features_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResetQuery::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:dto.srr.ResetQuery.features)
  return &features_;
}

// string version = 2;
inline void ResetQuery::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResetQuery::version() const {
  // @@protoc_insertion_point(field_get:dto.srr.ResetQuery.version)
  return version_.GetNoArena();
}
inline void ResetQuery::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.ResetQuery.version)
}
#if LANG_CXX11
inline void ResetQuery::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.ResetQuery.version)
}
#endif
inline void ResetQuery::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.ResetQuery.version)
}
inline void ResetQuery::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.ResetQuery.version)
}
inline ::std::string* ResetQuery::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.ResetQuery.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResetQuery::release_version() {
  // @@protoc_insertion_point(field_release:dto.srr.ResetQuery.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResetQuery::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.ResetQuery.version)
}

// -------------------------------------------------------------------

// ListFeatureQuery

// -------------------------------------------------------------------

// Query

// .dto.srr.SaveQuery save = 1;
inline bool Query::has_save() const {
  return parameters_case() == kSave;
}
inline void Query::set_has_save() {
  _oneof_case_[0] = kSave;
}
inline void Query::clear_save() {
  if (has_save()) {
    delete parameters_.save_;
    clear_has_parameters();
  }
}
inline const ::dto::srr::SaveQuery& Query::_internal_save() const {
  return *parameters_.save_;
}
inline ::dto::srr::SaveQuery* Query::release_save() {
  // @@protoc_insertion_point(field_release:dto.srr.Query.save)
  if (has_save()) {
    clear_has_parameters();
      ::dto::srr::SaveQuery* temp = parameters_.save_;
    parameters_.save_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dto::srr::SaveQuery& Query::save() const {
  // @@protoc_insertion_point(field_get:dto.srr.Query.save)
  return has_save()
      ? *parameters_.save_
      : *reinterpret_cast< ::dto::srr::SaveQuery*>(&::dto::srr::_SaveQuery_default_instance_);
}
inline ::dto::srr::SaveQuery* Query::mutable_save() {
  if (!has_save()) {
    clear_parameters();
    set_has_save();
    parameters_.save_ = CreateMaybeMessage< ::dto::srr::SaveQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.Query.save)
  return parameters_.save_;
}

// .dto.srr.RestoreQuery restore = 2;
inline bool Query::has_restore() const {
  return parameters_case() == kRestore;
}
inline void Query::set_has_restore() {
  _oneof_case_[0] = kRestore;
}
inline void Query::clear_restore() {
  if (has_restore()) {
    delete parameters_.restore_;
    clear_has_parameters();
  }
}
inline const ::dto::srr::RestoreQuery& Query::_internal_restore() const {
  return *parameters_.restore_;
}
inline ::dto::srr::RestoreQuery* Query::release_restore() {
  // @@protoc_insertion_point(field_release:dto.srr.Query.restore)
  if (has_restore()) {
    clear_has_parameters();
      ::dto::srr::RestoreQuery* temp = parameters_.restore_;
    parameters_.restore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dto::srr::RestoreQuery& Query::restore() const {
  // @@protoc_insertion_point(field_get:dto.srr.Query.restore)
  return has_restore()
      ? *parameters_.restore_
      : *reinterpret_cast< ::dto::srr::RestoreQuery*>(&::dto::srr::_RestoreQuery_default_instance_);
}
inline ::dto::srr::RestoreQuery* Query::mutable_restore() {
  if (!has_restore()) {
    clear_parameters();
    set_has_restore();
    parameters_.restore_ = CreateMaybeMessage< ::dto::srr::RestoreQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.Query.restore)
  return parameters_.restore_;
}

// .dto.srr.ResetQuery reset = 3;
inline bool Query::has_reset() const {
  return parameters_case() == kReset;
}
inline void Query::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline void Query::clear_reset() {
  if (has_reset()) {
    delete parameters_.reset_;
    clear_has_parameters();
  }
}
inline const ::dto::srr::ResetQuery& Query::_internal_reset() const {
  return *parameters_.reset_;
}
inline ::dto::srr::ResetQuery* Query::release_reset() {
  // @@protoc_insertion_point(field_release:dto.srr.Query.reset)
  if (has_reset()) {
    clear_has_parameters();
      ::dto::srr::ResetQuery* temp = parameters_.reset_;
    parameters_.reset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dto::srr::ResetQuery& Query::reset() const {
  // @@protoc_insertion_point(field_get:dto.srr.Query.reset)
  return has_reset()
      ? *parameters_.reset_
      : *reinterpret_cast< ::dto::srr::ResetQuery*>(&::dto::srr::_ResetQuery_default_instance_);
}
inline ::dto::srr::ResetQuery* Query::mutable_reset() {
  if (!has_reset()) {
    clear_parameters();
    set_has_reset();
    parameters_.reset_ = CreateMaybeMessage< ::dto::srr::ResetQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.Query.reset)
  return parameters_.reset_;
}

// .dto.srr.ListFeatureQuery list_feature = 4;
inline bool Query::has_list_feature() const {
  return parameters_case() == kListFeature;
}
inline void Query::set_has_list_feature() {
  _oneof_case_[0] = kListFeature;
}
inline void Query::clear_list_feature() {
  if (has_list_feature()) {
    delete parameters_.list_feature_;
    clear_has_parameters();
  }
}
inline const ::dto::srr::ListFeatureQuery& Query::_internal_list_feature() const {
  return *parameters_.list_feature_;
}
inline ::dto::srr::ListFeatureQuery* Query::release_list_feature() {
  // @@protoc_insertion_point(field_release:dto.srr.Query.list_feature)
  if (has_list_feature()) {
    clear_has_parameters();
      ::dto::srr::ListFeatureQuery* temp = parameters_.list_feature_;
    parameters_.list_feature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dto::srr::ListFeatureQuery& Query::list_feature() const {
  // @@protoc_insertion_point(field_get:dto.srr.Query.list_feature)
  return has_list_feature()
      ? *parameters_.list_feature_
      : *reinterpret_cast< ::dto::srr::ListFeatureQuery*>(&::dto::srr::_ListFeatureQuery_default_instance_);
}
inline ::dto::srr::ListFeatureQuery* Query::mutable_list_feature() {
  if (!has_list_feature()) {
    clear_parameters();
    set_has_list_feature();
    parameters_.list_feature_ = CreateMaybeMessage< ::dto::srr::ListFeatureQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.Query.list_feature)
  return parameters_.list_feature_;
}

inline bool Query::has_parameters() const {
  return parameters_case() != PARAMETERS_NOT_SET;
}
inline void Query::clear_has_parameters() {
  _oneof_case_[0] = PARAMETERS_NOT_SET;
}
inline Query::ParametersCase Query::parameters_case() const {
  return Query::ParametersCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FeatureAndStatus

// .dto.srr.FeatureStatus status = 1;
inline bool FeatureAndStatus::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void FeatureAndStatus::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::dto::srr::FeatureStatus& FeatureAndStatus::_internal_status() const {
  return *status_;
}
inline const ::dto::srr::FeatureStatus& FeatureAndStatus::status() const {
  const ::dto::srr::FeatureStatus* p = status_;
  // @@protoc_insertion_point(field_get:dto.srr.FeatureAndStatus.status)
  return p != NULL ? *p : *reinterpret_cast<const ::dto::srr::FeatureStatus*>(
      &::dto::srr::_FeatureStatus_default_instance_);
}
inline ::dto::srr::FeatureStatus* FeatureAndStatus::release_status() {
  // @@protoc_insertion_point(field_release:dto.srr.FeatureAndStatus.status)
  
  ::dto::srr::FeatureStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::dto::srr::FeatureStatus* FeatureAndStatus::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::dto::srr::FeatureStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.FeatureAndStatus.status)
  return status_;
}
inline void FeatureAndStatus::set_allocated_status(::dto::srr::FeatureStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:dto.srr.FeatureAndStatus.status)
}

// .dto.srr.Feature feature = 2;
inline bool FeatureAndStatus::has_feature() const {
  return this != internal_default_instance() && feature_ != NULL;
}
inline void FeatureAndStatus::clear_feature() {
  if (GetArenaNoVirtual() == NULL && feature_ != NULL) {
    delete feature_;
  }
  feature_ = NULL;
}
inline const ::dto::srr::Feature& FeatureAndStatus::_internal_feature() const {
  return *feature_;
}
inline const ::dto::srr::Feature& FeatureAndStatus::feature() const {
  const ::dto::srr::Feature* p = feature_;
  // @@protoc_insertion_point(field_get:dto.srr.FeatureAndStatus.feature)
  return p != NULL ? *p : *reinterpret_cast<const ::dto::srr::Feature*>(
      &::dto::srr::_Feature_default_instance_);
}
inline ::dto::srr::Feature* FeatureAndStatus::release_feature() {
  // @@protoc_insertion_point(field_release:dto.srr.FeatureAndStatus.feature)
  
  ::dto::srr::Feature* temp = feature_;
  feature_ = NULL;
  return temp;
}
inline ::dto::srr::Feature* FeatureAndStatus::mutable_feature() {
  
  if (feature_ == NULL) {
    auto* p = CreateMaybeMessage<::dto::srr::Feature>(GetArenaNoVirtual());
    feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.FeatureAndStatus.feature)
  return feature_;
}
inline void FeatureAndStatus::set_allocated_feature(::dto::srr::Feature* feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete feature_;
  }
  if (feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feature, submessage_arena);
    }
    
  } else {
    
  }
  feature_ = feature;
  // @@protoc_insertion_point(field_set_allocated:dto.srr.FeatureAndStatus.feature)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SaveResponse

// map<string, .dto.srr.FeatureAndStatus> map_features_data = 1;
inline int SaveResponse::map_features_data_size() const {
  return map_features_data_.size();
}
inline void SaveResponse::clear_map_features_data() {
  map_features_data_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureAndStatus >&
SaveResponse::map_features_data() const {
  // @@protoc_insertion_point(field_map:dto.srr.SaveResponse.map_features_data)
  return map_features_data_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureAndStatus >*
SaveResponse::mutable_map_features_data() {
  // @@protoc_insertion_point(field_mutable_map:dto.srr.SaveResponse.map_features_data)
  return map_features_data_.MutableMap();
}

// string version = 2;
inline void SaveResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveResponse::version() const {
  // @@protoc_insertion_point(field_get:dto.srr.SaveResponse.version)
  return version_.GetNoArena();
}
inline void SaveResponse::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.SaveResponse.version)
}
#if LANG_CXX11
inline void SaveResponse::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.SaveResponse.version)
}
#endif
inline void SaveResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.SaveResponse.version)
}
inline void SaveResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.SaveResponse.version)
}
inline ::std::string* SaveResponse::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.SaveResponse.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveResponse::release_version() {
  // @@protoc_insertion_point(field_release:dto.srr.SaveResponse.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveResponse::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.SaveResponse.version)
}

// string checksum = 3;
inline void SaveResponse::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveResponse::checksum() const {
  // @@protoc_insertion_point(field_get:dto.srr.SaveResponse.checksum)
  return checksum_.GetNoArena();
}
inline void SaveResponse::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.SaveResponse.checksum)
}
#if LANG_CXX11
inline void SaveResponse::set_checksum(::std::string&& value) {
  
  checksum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.SaveResponse.checksum)
}
#endif
inline void SaveResponse::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.SaveResponse.checksum)
}
inline void SaveResponse::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.SaveResponse.checksum)
}
inline ::std::string* SaveResponse::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.SaveResponse.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveResponse::release_checksum() {
  // @@protoc_insertion_point(field_release:dto.srr.SaveResponse.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveResponse::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.SaveResponse.checksum)
}

// .dto.srr.FeatureStatus status = 4;
inline bool SaveResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void SaveResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::dto::srr::FeatureStatus& SaveResponse::_internal_status() const {
  return *status_;
}
inline const ::dto::srr::FeatureStatus& SaveResponse::status() const {
  const ::dto::srr::FeatureStatus* p = status_;
  // @@protoc_insertion_point(field_get:dto.srr.SaveResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::dto::srr::FeatureStatus*>(
      &::dto::srr::_FeatureStatus_default_instance_);
}
inline ::dto::srr::FeatureStatus* SaveResponse::release_status() {
  // @@protoc_insertion_point(field_release:dto.srr.SaveResponse.status)
  
  ::dto::srr::FeatureStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::dto::srr::FeatureStatus* SaveResponse::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::dto::srr::FeatureStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.SaveResponse.status)
  return status_;
}
inline void SaveResponse::set_allocated_status(::dto::srr::FeatureStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:dto.srr.SaveResponse.status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RestoreResponse

// map<string, .dto.srr.FeatureStatus> map_features_status = 1;
inline int RestoreResponse::map_features_status_size() const {
  return map_features_status_.size();
}
inline void RestoreResponse::clear_map_features_status() {
  map_features_status_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureStatus >&
RestoreResponse::map_features_status() const {
  // @@protoc_insertion_point(field_map:dto.srr.RestoreResponse.map_features_status)
  return map_features_status_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureStatus >*
RestoreResponse::mutable_map_features_status() {
  // @@protoc_insertion_point(field_mutable_map:dto.srr.RestoreResponse.map_features_status)
  return map_features_status_.MutableMap();
}

// .dto.srr.FeatureStatus status = 2;
inline bool RestoreResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void RestoreResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::dto::srr::FeatureStatus& RestoreResponse::_internal_status() const {
  return *status_;
}
inline const ::dto::srr::FeatureStatus& RestoreResponse::status() const {
  const ::dto::srr::FeatureStatus* p = status_;
  // @@protoc_insertion_point(field_get:dto.srr.RestoreResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::dto::srr::FeatureStatus*>(
      &::dto::srr::_FeatureStatus_default_instance_);
}
inline ::dto::srr::FeatureStatus* RestoreResponse::release_status() {
  // @@protoc_insertion_point(field_release:dto.srr.RestoreResponse.status)
  
  ::dto::srr::FeatureStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::dto::srr::FeatureStatus* RestoreResponse::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::dto::srr::FeatureStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.RestoreResponse.status)
  return status_;
}
inline void RestoreResponse::set_allocated_status(::dto::srr::FeatureStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:dto.srr.RestoreResponse.status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ResetResponse

// map<string, .dto.srr.FeatureStatus> map_features_status = 1;
inline int ResetResponse::map_features_status_size() const {
  return map_features_status_.size();
}
inline void ResetResponse::clear_map_features_status() {
  map_features_status_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureStatus >&
ResetResponse::map_features_status() const {
  // @@protoc_insertion_point(field_map:dto.srr.ResetResponse.map_features_status)
  return map_features_status_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureStatus >*
ResetResponse::mutable_map_features_status() {
  // @@protoc_insertion_point(field_mutable_map:dto.srr.ResetResponse.map_features_status)
  return map_features_status_.MutableMap();
}

// -------------------------------------------------------------------

// FeatureDependencies

// repeated string dependencies = 1;
inline int FeatureDependencies::dependencies_size() const {
  return dependencies_.size();
}
inline void FeatureDependencies::clear_dependencies() {
  dependencies_.Clear();
}
inline const ::std::string& FeatureDependencies::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:dto.srr.FeatureDependencies.dependencies)
  return dependencies_.Get(index);
}
inline ::std::string* FeatureDependencies::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:dto.srr.FeatureDependencies.dependencies)
  return dependencies_.Mutable(index);
}
inline void FeatureDependencies::set_dependencies(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dto.srr.FeatureDependencies.dependencies)
  dependencies_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FeatureDependencies::set_dependencies(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dto.srr.FeatureDependencies.dependencies)
  dependencies_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FeatureDependencies::set_dependencies(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dto.srr.FeatureDependencies.dependencies)
}
inline void FeatureDependencies::set_dependencies(int index, const char* value, size_t size) {
  dependencies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dto.srr.FeatureDependencies.dependencies)
}
inline ::std::string* FeatureDependencies::add_dependencies() {
  // @@protoc_insertion_point(field_add_mutable:dto.srr.FeatureDependencies.dependencies)
  return dependencies_.Add();
}
inline void FeatureDependencies::add_dependencies(const ::std::string& value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dto.srr.FeatureDependencies.dependencies)
}
#if LANG_CXX11
inline void FeatureDependencies::add_dependencies(::std::string&& value) {
  dependencies_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dto.srr.FeatureDependencies.dependencies)
}
#endif
inline void FeatureDependencies::add_dependencies(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dto.srr.FeatureDependencies.dependencies)
}
inline void FeatureDependencies::add_dependencies(const char* value, size_t size) {
  dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dto.srr.FeatureDependencies.dependencies)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FeatureDependencies::dependencies() const {
  // @@protoc_insertion_point(field_list:dto.srr.FeatureDependencies.dependencies)
  return dependencies_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FeatureDependencies::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:dto.srr.FeatureDependencies.dependencies)
  return &dependencies_;
}

// string description = 2;
inline void FeatureDependencies::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureDependencies::description() const {
  // @@protoc_insertion_point(field_get:dto.srr.FeatureDependencies.description)
  return description_.GetNoArena();
}
inline void FeatureDependencies::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.FeatureDependencies.description)
}
#if LANG_CXX11
inline void FeatureDependencies::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.FeatureDependencies.description)
}
#endif
inline void FeatureDependencies::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.FeatureDependencies.description)
}
inline void FeatureDependencies::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.FeatureDependencies.description)
}
inline ::std::string* FeatureDependencies::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.FeatureDependencies.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureDependencies::release_description() {
  // @@protoc_insertion_point(field_release:dto.srr.FeatureDependencies.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureDependencies::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.FeatureDependencies.description)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ListFeatureResponse

// map<string, .dto.srr.FeatureDependencies> map_features_dependencies = 1;
inline int ListFeatureResponse::map_features_dependencies_size() const {
  return map_features_dependencies_.size();
}
inline void ListFeatureResponse::clear_map_features_dependencies() {
  map_features_dependencies_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureDependencies >&
ListFeatureResponse::map_features_dependencies() const {
  // @@protoc_insertion_point(field_map:dto.srr.ListFeatureResponse.map_features_dependencies)
  return map_features_dependencies_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::dto::srr::FeatureDependencies >*
ListFeatureResponse::mutable_map_features_dependencies() {
  // @@protoc_insertion_point(field_mutable_map:dto.srr.ListFeatureResponse.map_features_dependencies)
  return map_features_dependencies_.MutableMap();
}

// string version = 2;
inline void ListFeatureResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFeatureResponse::version() const {
  // @@protoc_insertion_point(field_get:dto.srr.ListFeatureResponse.version)
  return version_.GetNoArena();
}
inline void ListFeatureResponse::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.ListFeatureResponse.version)
}
#if LANG_CXX11
inline void ListFeatureResponse::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.ListFeatureResponse.version)
}
#endif
inline void ListFeatureResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.ListFeatureResponse.version)
}
inline void ListFeatureResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.ListFeatureResponse.version)
}
inline ::std::string* ListFeatureResponse::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.ListFeatureResponse.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFeatureResponse::release_version() {
  // @@protoc_insertion_point(field_release:dto.srr.ListFeatureResponse.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFeatureResponse::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.ListFeatureResponse.version)
}

// string passphrass_definition = 3;
inline void ListFeatureResponse::clear_passphrass_definition() {
  passphrass_definition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFeatureResponse::passphrass_definition() const {
  // @@protoc_insertion_point(field_get:dto.srr.ListFeatureResponse.passphrass_definition)
  return passphrass_definition_.GetNoArena();
}
inline void ListFeatureResponse::set_passphrass_definition(const ::std::string& value) {
  
  passphrass_definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.ListFeatureResponse.passphrass_definition)
}
#if LANG_CXX11
inline void ListFeatureResponse::set_passphrass_definition(::std::string&& value) {
  
  passphrass_definition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.ListFeatureResponse.passphrass_definition)
}
#endif
inline void ListFeatureResponse::set_passphrass_definition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passphrass_definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.ListFeatureResponse.passphrass_definition)
}
inline void ListFeatureResponse::set_passphrass_definition(const char* value, size_t size) {
  
  passphrass_definition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.ListFeatureResponse.passphrass_definition)
}
inline ::std::string* ListFeatureResponse::mutable_passphrass_definition() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.ListFeatureResponse.passphrass_definition)
  return passphrass_definition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFeatureResponse::release_passphrass_definition() {
  // @@protoc_insertion_point(field_release:dto.srr.ListFeatureResponse.passphrass_definition)
  
  return passphrass_definition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFeatureResponse::set_allocated_passphrass_definition(::std::string* passphrass_definition) {
  if (passphrass_definition != NULL) {
    
  } else {
    
  }
  passphrass_definition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passphrass_definition);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.ListFeatureResponse.passphrass_definition)
}

// string passphrass_description = 4;
inline void ListFeatureResponse::clear_passphrass_description() {
  passphrass_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFeatureResponse::passphrass_description() const {
  // @@protoc_insertion_point(field_get:dto.srr.ListFeatureResponse.passphrass_description)
  return passphrass_description_.GetNoArena();
}
inline void ListFeatureResponse::set_passphrass_description(const ::std::string& value) {
  
  passphrass_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.srr.ListFeatureResponse.passphrass_description)
}
#if LANG_CXX11
inline void ListFeatureResponse::set_passphrass_description(::std::string&& value) {
  
  passphrass_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.srr.ListFeatureResponse.passphrass_description)
}
#endif
inline void ListFeatureResponse::set_passphrass_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passphrass_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.srr.ListFeatureResponse.passphrass_description)
}
inline void ListFeatureResponse::set_passphrass_description(const char* value, size_t size) {
  
  passphrass_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.srr.ListFeatureResponse.passphrass_description)
}
inline ::std::string* ListFeatureResponse::mutable_passphrass_description() {
  
  // @@protoc_insertion_point(field_mutable:dto.srr.ListFeatureResponse.passphrass_description)
  return passphrass_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFeatureResponse::release_passphrass_description() {
  // @@protoc_insertion_point(field_release:dto.srr.ListFeatureResponse.passphrass_description)
  
  return passphrass_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFeatureResponse::set_allocated_passphrass_description(::std::string* passphrass_description) {
  if (passphrass_description != NULL) {
    
  } else {
    
  }
  passphrass_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passphrass_description);
  // @@protoc_insertion_point(field_set_allocated:dto.srr.ListFeatureResponse.passphrass_description)
}

// -------------------------------------------------------------------

// Response

// .dto.srr.SaveResponse save = 1;
inline bool Response::has_save() const {
  return parameters_case() == kSave;
}
inline void Response::set_has_save() {
  _oneof_case_[0] = kSave;
}
inline void Response::clear_save() {
  if (has_save()) {
    delete parameters_.save_;
    clear_has_parameters();
  }
}
inline const ::dto::srr::SaveResponse& Response::_internal_save() const {
  return *parameters_.save_;
}
inline ::dto::srr::SaveResponse* Response::release_save() {
  // @@protoc_insertion_point(field_release:dto.srr.Response.save)
  if (has_save()) {
    clear_has_parameters();
      ::dto::srr::SaveResponse* temp = parameters_.save_;
    parameters_.save_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dto::srr::SaveResponse& Response::save() const {
  // @@protoc_insertion_point(field_get:dto.srr.Response.save)
  return has_save()
      ? *parameters_.save_
      : *reinterpret_cast< ::dto::srr::SaveResponse*>(&::dto::srr::_SaveResponse_default_instance_);
}
inline ::dto::srr::SaveResponse* Response::mutable_save() {
  if (!has_save()) {
    clear_parameters();
    set_has_save();
    parameters_.save_ = CreateMaybeMessage< ::dto::srr::SaveResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.Response.save)
  return parameters_.save_;
}

// .dto.srr.RestoreResponse restore = 2;
inline bool Response::has_restore() const {
  return parameters_case() == kRestore;
}
inline void Response::set_has_restore() {
  _oneof_case_[0] = kRestore;
}
inline void Response::clear_restore() {
  if (has_restore()) {
    delete parameters_.restore_;
    clear_has_parameters();
  }
}
inline const ::dto::srr::RestoreResponse& Response::_internal_restore() const {
  return *parameters_.restore_;
}
inline ::dto::srr::RestoreResponse* Response::release_restore() {
  // @@protoc_insertion_point(field_release:dto.srr.Response.restore)
  if (has_restore()) {
    clear_has_parameters();
      ::dto::srr::RestoreResponse* temp = parameters_.restore_;
    parameters_.restore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dto::srr::RestoreResponse& Response::restore() const {
  // @@protoc_insertion_point(field_get:dto.srr.Response.restore)
  return has_restore()
      ? *parameters_.restore_
      : *reinterpret_cast< ::dto::srr::RestoreResponse*>(&::dto::srr::_RestoreResponse_default_instance_);
}
inline ::dto::srr::RestoreResponse* Response::mutable_restore() {
  if (!has_restore()) {
    clear_parameters();
    set_has_restore();
    parameters_.restore_ = CreateMaybeMessage< ::dto::srr::RestoreResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.Response.restore)
  return parameters_.restore_;
}

// .dto.srr.ResetResponse reset = 3;
inline bool Response::has_reset() const {
  return parameters_case() == kReset;
}
inline void Response::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline void Response::clear_reset() {
  if (has_reset()) {
    delete parameters_.reset_;
    clear_has_parameters();
  }
}
inline const ::dto::srr::ResetResponse& Response::_internal_reset() const {
  return *parameters_.reset_;
}
inline ::dto::srr::ResetResponse* Response::release_reset() {
  // @@protoc_insertion_point(field_release:dto.srr.Response.reset)
  if (has_reset()) {
    clear_has_parameters();
      ::dto::srr::ResetResponse* temp = parameters_.reset_;
    parameters_.reset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dto::srr::ResetResponse& Response::reset() const {
  // @@protoc_insertion_point(field_get:dto.srr.Response.reset)
  return has_reset()
      ? *parameters_.reset_
      : *reinterpret_cast< ::dto::srr::ResetResponse*>(&::dto::srr::_ResetResponse_default_instance_);
}
inline ::dto::srr::ResetResponse* Response::mutable_reset() {
  if (!has_reset()) {
    clear_parameters();
    set_has_reset();
    parameters_.reset_ = CreateMaybeMessage< ::dto::srr::ResetResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.Response.reset)
  return parameters_.reset_;
}

// .dto.srr.ListFeatureResponse list_feature = 4;
inline bool Response::has_list_feature() const {
  return parameters_case() == kListFeature;
}
inline void Response::set_has_list_feature() {
  _oneof_case_[0] = kListFeature;
}
inline void Response::clear_list_feature() {
  if (has_list_feature()) {
    delete parameters_.list_feature_;
    clear_has_parameters();
  }
}
inline const ::dto::srr::ListFeatureResponse& Response::_internal_list_feature() const {
  return *parameters_.list_feature_;
}
inline ::dto::srr::ListFeatureResponse* Response::release_list_feature() {
  // @@protoc_insertion_point(field_release:dto.srr.Response.list_feature)
  if (has_list_feature()) {
    clear_has_parameters();
      ::dto::srr::ListFeatureResponse* temp = parameters_.list_feature_;
    parameters_.list_feature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::dto::srr::ListFeatureResponse& Response::list_feature() const {
  // @@protoc_insertion_point(field_get:dto.srr.Response.list_feature)
  return has_list_feature()
      ? *parameters_.list_feature_
      : *reinterpret_cast< ::dto::srr::ListFeatureResponse*>(&::dto::srr::_ListFeatureResponse_default_instance_);
}
inline ::dto::srr::ListFeatureResponse* Response::mutable_list_feature() {
  if (!has_list_feature()) {
    clear_parameters();
    set_has_list_feature();
    parameters_.list_feature_ = CreateMaybeMessage< ::dto::srr::ListFeatureResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:dto.srr.Response.list_feature)
  return parameters_.list_feature_;
}

inline bool Response::has_parameters() const {
  return parameters_case() != PARAMETERS_NOT_SET;
}
inline void Response::clear_has_parameters() {
  _oneof_case_[0] = PARAMETERS_NOT_SET;
}
inline Response::ParametersCase Response::parameters_case() const {
  return Response::ParametersCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srr
}  // namespace dto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dto::srr::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dto::srr::Status>() {
  return ::dto::srr::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_srr_2eproto

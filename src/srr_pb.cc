// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/srr.proto

#include "srr_pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Feature_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FeatureAndStatus_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureDependencies_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureStatus_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListFeatureQuery_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListFeatureResponse_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetQuery_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResetResponse_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResetResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreQuery_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreQuery_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreResponse_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveQuery_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveResponse_src_2fsrr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_src_2fsrr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveResponse_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto;
namespace dto {
namespace srr {
class FeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feature> _instance;
} _Feature_default_instance_;
class FeatureStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureStatus> _instance;
} _FeatureStatus_default_instance_;
class SaveQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveQuery> _instance;
} _SaveQuery_default_instance_;
class RestoreQuery_MapFeaturesDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreQuery_MapFeaturesDataEntry_DoNotUse> _instance;
} _RestoreQuery_MapFeaturesDataEntry_DoNotUse_default_instance_;
class RestoreQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreQuery> _instance;
} _RestoreQuery_default_instance_;
class ResetQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetQuery> _instance;
} _ResetQuery_default_instance_;
class ListFeatureQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListFeatureQuery> _instance;
} _ListFeatureQuery_default_instance_;
class QueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Query> _instance;
  const ::dto::srr::SaveQuery* save_;
  const ::dto::srr::RestoreQuery* restore_;
  const ::dto::srr::ResetQuery* reset_;
  const ::dto::srr::ListFeatureQuery* list_feature_;
} _Query_default_instance_;
class FeatureAndStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureAndStatus> _instance;
} _FeatureAndStatus_default_instance_;
class SaveResponse_MapFeaturesDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveResponse_MapFeaturesDataEntry_DoNotUse> _instance;
} _SaveResponse_MapFeaturesDataEntry_DoNotUse_default_instance_;
class SaveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveResponse> _instance;
} _SaveResponse_default_instance_;
class RestoreResponse_MapFeaturesStatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreResponse_MapFeaturesStatusEntry_DoNotUse> _instance;
} _RestoreResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_;
class RestoreResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreResponse> _instance;
} _RestoreResponse_default_instance_;
class ResetResponse_MapFeaturesStatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetResponse_MapFeaturesStatusEntry_DoNotUse> _instance;
} _ResetResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_;
class ResetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetResponse> _instance;
} _ResetResponse_default_instance_;
class FeatureDependenciesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureDependencies> _instance;
} _FeatureDependencies_default_instance_;
class ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse> _instance;
} _ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_default_instance_;
class ListFeatureResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListFeatureResponse> _instance;
} _ListFeatureResponse_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
  const ::dto::srr::SaveResponse* save_;
  const ::dto::srr::RestoreResponse* restore_;
  const ::dto::srr::ResetResponse* reset_;
  const ::dto::srr::ListFeatureResponse* list_feature_;
} _Response_default_instance_;
}  // namespace srr
}  // namespace dto
static void InitDefaultsscc_info_Feature_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_Feature_default_instance_;
    new (ptr) ::dto::srr::Feature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::Feature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Feature_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Feature_src_2fsrr_2eproto}, {}};

static void InitDefaultsscc_info_FeatureAndStatus_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_FeatureAndStatus_default_instance_;
    new (ptr) ::dto::srr::FeatureAndStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::FeatureAndStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FeatureAndStatus_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FeatureAndStatus_src_2fsrr_2eproto}, {
      &scc_info_FeatureStatus_src_2fsrr_2eproto.base,
      &scc_info_Feature_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_FeatureDependencies_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_FeatureDependencies_default_instance_;
    new (ptr) ::dto::srr::FeatureDependencies();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::FeatureDependencies::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureDependencies_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeatureDependencies_src_2fsrr_2eproto}, {}};

static void InitDefaultsscc_info_FeatureStatus_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_FeatureStatus_default_instance_;
    new (ptr) ::dto::srr::FeatureStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::FeatureStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureStatus_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeatureStatus_src_2fsrr_2eproto}, {}};

static void InitDefaultsscc_info_ListFeatureQuery_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_ListFeatureQuery_default_instance_;
    new (ptr) ::dto::srr::ListFeatureQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::ListFeatureQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListFeatureQuery_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListFeatureQuery_src_2fsrr_2eproto}, {}};

static void InitDefaultsscc_info_ListFeatureResponse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_ListFeatureResponse_default_instance_;
    new (ptr) ::dto::srr::ListFeatureResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::ListFeatureResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListFeatureResponse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListFeatureResponse_src_2fsrr_2eproto}, {
      &scc_info_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_default_instance_;
    new (ptr) ::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse();
  }
  ::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_src_2fsrr_2eproto}, {
      &scc_info_FeatureDependencies_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_Query_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_Query_default_instance_;
    new (ptr) ::dto::srr::Query();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::Query::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Query_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Query_src_2fsrr_2eproto}, {
      &scc_info_SaveQuery_src_2fsrr_2eproto.base,
      &scc_info_RestoreQuery_src_2fsrr_2eproto.base,
      &scc_info_ResetQuery_src_2fsrr_2eproto.base,
      &scc_info_ListFeatureQuery_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_ResetQuery_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_ResetQuery_default_instance_;
    new (ptr) ::dto::srr::ResetQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::ResetQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetQuery_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetQuery_src_2fsrr_2eproto}, {}};

static void InitDefaultsscc_info_ResetResponse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_ResetResponse_default_instance_;
    new (ptr) ::dto::srr::ResetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::ResetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResetResponse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResetResponse_src_2fsrr_2eproto}, {
      &scc_info_ResetResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_ResetResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_ResetResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_;
    new (ptr) ::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse();
  }
  ::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResetResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResetResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto}, {
      &scc_info_FeatureStatus_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_Response_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_Response_default_instance_;
    new (ptr) ::dto::srr::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Response_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Response_src_2fsrr_2eproto}, {
      &scc_info_SaveResponse_src_2fsrr_2eproto.base,
      &scc_info_RestoreResponse_src_2fsrr_2eproto.base,
      &scc_info_ResetResponse_src_2fsrr_2eproto.base,
      &scc_info_ListFeatureResponse_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_RestoreQuery_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_RestoreQuery_default_instance_;
    new (ptr) ::dto::srr::RestoreQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::RestoreQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreQuery_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestoreQuery_src_2fsrr_2eproto}, {
      &scc_info_RestoreQuery_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_RestoreQuery_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_RestoreQuery_MapFeaturesDataEntry_DoNotUse_default_instance_;
    new (ptr) ::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse();
  }
  ::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreQuery_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestoreQuery_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto}, {
      &scc_info_Feature_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_RestoreResponse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_RestoreResponse_default_instance_;
    new (ptr) ::dto::srr::RestoreResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::RestoreResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreResponse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestoreResponse_src_2fsrr_2eproto}, {
      &scc_info_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_;
    new (ptr) ::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse();
  }
  ::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto}, {
      &scc_info_FeatureStatus_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_SaveQuery_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_SaveQuery_default_instance_;
    new (ptr) ::dto::srr::SaveQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::SaveQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveQuery_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaveQuery_src_2fsrr_2eproto}, {}};

static void InitDefaultsscc_info_SaveResponse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_SaveResponse_default_instance_;
    new (ptr) ::dto::srr::SaveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dto::srr::SaveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveResponse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SaveResponse_src_2fsrr_2eproto}, {
      &scc_info_SaveResponse_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto.base,}};

static void InitDefaultsscc_info_SaveResponse_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dto::srr::_SaveResponse_MapFeaturesDataEntry_DoNotUse_default_instance_;
    new (ptr) ::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse();
  }
  ::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveResponse_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SaveResponse_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto}, {
      &scc_info_FeatureAndStatus_src_2fsrr_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_src_2fsrr_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_src_2fsrr_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_src_2fsrr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_src_2fsrr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::Feature, version_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::Feature, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::FeatureStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::FeatureStatus, status_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::FeatureStatus, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveQuery, features_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveQuery, passpharse_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreQuery, map_features_data_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreQuery, passpharse_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreQuery, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetQuery, features_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetQuery, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ListFeatureQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dto::srr::Query, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::dto::srr::QueryDefaultTypeInternal, save_),
  offsetof(::dto::srr::QueryDefaultTypeInternal, restore_),
  offsetof(::dto::srr::QueryDefaultTypeInternal, reset_),
  offsetof(::dto::srr::QueryDefaultTypeInternal, list_feature_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::Query, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::FeatureAndStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::FeatureAndStatus, status_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::FeatureAndStatus, feature_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveResponse, map_features_data_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::SaveResponse, version_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::RestoreResponse, map_features_status_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ResetResponse, map_features_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::FeatureDependencies, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::FeatureDependencies, dependencies_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ListFeatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dto::srr::ListFeatureResponse, map_features_dependencies_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::ListFeatureResponse, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dto::srr::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dto::srr::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::dto::srr::ResponseDefaultTypeInternal, save_),
  offsetof(::dto::srr::ResponseDefaultTypeInternal, restore_),
  offsetof(::dto::srr::ResponseDefaultTypeInternal, reset_),
  offsetof(::dto::srr::ResponseDefaultTypeInternal, list_feature_),
  PROTOBUF_FIELD_OFFSET(::dto::srr::Response, parameters_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dto::srr::Feature)},
  { 7, -1, sizeof(::dto::srr::FeatureStatus)},
  { 14, -1, sizeof(::dto::srr::SaveQuery)},
  { 21, 28, sizeof(::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse)},
  { 30, -1, sizeof(::dto::srr::RestoreQuery)},
  { 38, -1, sizeof(::dto::srr::ResetQuery)},
  { 45, -1, sizeof(::dto::srr::ListFeatureQuery)},
  { 50, -1, sizeof(::dto::srr::Query)},
  { 60, -1, sizeof(::dto::srr::FeatureAndStatus)},
  { 67, 74, sizeof(::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse)},
  { 76, -1, sizeof(::dto::srr::SaveResponse)},
  { 83, 90, sizeof(::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse)},
  { 92, -1, sizeof(::dto::srr::RestoreResponse)},
  { 98, 105, sizeof(::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse)},
  { 107, -1, sizeof(::dto::srr::ResetResponse)},
  { 113, -1, sizeof(::dto::srr::FeatureDependencies)},
  { 119, 126, sizeof(::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse)},
  { 128, -1, sizeof(::dto::srr::ListFeatureResponse)},
  { 135, -1, sizeof(::dto::srr::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_Feature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_FeatureStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_SaveQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_RestoreQuery_MapFeaturesDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_RestoreQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_ResetQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_ListFeatureQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_Query_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_FeatureAndStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_SaveResponse_MapFeaturesDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_SaveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_RestoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_ResetResponse_MapFeaturesStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_ResetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_FeatureDependencies_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_ListFeatureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dto::srr::_Response_default_instance_),
};

const char descriptor_table_protodef_src_2fsrr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsrc/srr.proto\022\007dto.srr\"(\n\007Feature\022\017\n\007v"
  "ersion\030\001 \001(\t\022\014\n\004data\030\002 \001(\t\"\?\n\rFeatureSta"
  "tus\022\037\n\006status\030\001 \001(\0162\017.dto.srr.Status\022\r\n\005"
  "error\030\002 \001(\t\"1\n\tSaveQuery\022\020\n\010features\030\001 \003"
  "(\t\022\022\n\npasspharse\030\002 \001(\t\"\304\001\n\014RestoreQuery\022"
  "E\n\021map_features_data\030\001 \003(\0132*.dto.srr.Res"
  "toreQuery.MapFeaturesDataEntry\022\022\n\npassph"
  "arse\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\032H\n\024MapFeatur"
  "esDataEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132"
  "\020.dto.srr.Feature:\0028\001\"/\n\nResetQuery\022\020\n\010f"
  "eatures\030\001 \003(\t\022\017\n\007version\030\002 \001(\t\"\022\n\020ListFe"
  "atureQuery\"\274\001\n\005Query\022\"\n\004save\030\001 \001(\0132\022.dto"
  ".srr.SaveQueryH\000\022(\n\007restore\030\002 \001(\0132\025.dto."
  "srr.RestoreQueryH\000\022$\n\005reset\030\003 \001(\0132\023.dto."
  "srr.ResetQueryH\000\0221\n\014list_feature\030\004 \001(\0132\031"
  ".dto.srr.ListFeatureQueryH\000B\014\n\nparameter"
  "s\"]\n\020FeatureAndStatus\022&\n\006status\030\001 \001(\0132\026."
  "dto.srr.FeatureStatus\022!\n\007feature\030\002 \001(\0132\020"
  ".dto.srr.Feature\"\271\001\n\014SaveResponse\022E\n\021map"
  "_features_data\030\001 \003(\0132*.dto.srr.SaveRespo"
  "nse.MapFeaturesDataEntry\022\017\n\007version\030\002 \001("
  "\t\032Q\n\024MapFeaturesDataEntry\022\013\n\003key\030\001 \001(\t\022("
  "\n\005value\030\002 \001(\0132\031.dto.srr.FeatureAndStatus"
  ":\0028\001\"\261\001\n\017RestoreResponse\022L\n\023map_features"
  "_status\030\001 \003(\0132/.dto.srr.RestoreResponse."
  "MapFeaturesStatusEntry\032P\n\026MapFeaturesSta"
  "tusEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.d"
  "to.srr.FeatureStatus:\0028\001\"\255\001\n\rResetRespon"
  "se\022J\n\023map_features_status\030\001 \003(\0132-.dto.sr"
  "r.ResetResponse.MapFeaturesStatusEntry\032P"
  "\n\026MapFeaturesStatusEntry\022\013\n\003key\030\001 \001(\t\022%\n"
  "\005value\030\002 \001(\0132\026.dto.srr.FeatureStatus:\0028\001"
  "\"+\n\023FeatureDependencies\022\024\n\014dependencies\030"
  "\001 \003(\t\"\342\001\n\023ListFeatureResponse\022\\\n\031map_fea"
  "tures_dependencies\030\001 \003(\01329.dto.srr.ListF"
  "eatureResponse.MapFeaturesDependenciesEn"
  "try\022\017\n\007version\030\002 \001(\t\032\\\n\034MapFeaturesDepen"
  "denciesEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\013"
  "2\034.dto.srr.FeatureDependencies:\0028\001\"\313\001\n\010R"
  "esponse\022%\n\004save\030\001 \001(\0132\025.dto.srr.SaveResp"
  "onseH\000\022+\n\007restore\030\002 \001(\0132\030.dto.srr.Restor"
  "eResponseH\000\022\'\n\005reset\030\003 \001(\0132\026.dto.srr.Res"
  "etResponseH\000\0224\n\014list_feature\030\004 \001(\0132\034.dto"
  ".srr.ListFeatureResponseH\000B\014\n\nparameters"
  "*C\n\006Status\022\013\n\007UNKNOWN\020\000\022\013\n\007SUCCESS\020\001\022\n\n\006"
  "FAILED\020\002\022\023\n\017PARTIAL_SUCCESS\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_src_2fsrr_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_src_2fsrr_2eproto_sccs[19] = {
  &scc_info_Feature_src_2fsrr_2eproto.base,
  &scc_info_FeatureAndStatus_src_2fsrr_2eproto.base,
  &scc_info_FeatureDependencies_src_2fsrr_2eproto.base,
  &scc_info_FeatureStatus_src_2fsrr_2eproto.base,
  &scc_info_ListFeatureQuery_src_2fsrr_2eproto.base,
  &scc_info_ListFeatureResponse_src_2fsrr_2eproto.base,
  &scc_info_ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse_src_2fsrr_2eproto.base,
  &scc_info_Query_src_2fsrr_2eproto.base,
  &scc_info_ResetQuery_src_2fsrr_2eproto.base,
  &scc_info_ResetResponse_src_2fsrr_2eproto.base,
  &scc_info_ResetResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto.base,
  &scc_info_Response_src_2fsrr_2eproto.base,
  &scc_info_RestoreQuery_src_2fsrr_2eproto.base,
  &scc_info_RestoreQuery_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto.base,
  &scc_info_RestoreResponse_src_2fsrr_2eproto.base,
  &scc_info_RestoreResponse_MapFeaturesStatusEntry_DoNotUse_src_2fsrr_2eproto.base,
  &scc_info_SaveQuery_src_2fsrr_2eproto.base,
  &scc_info_SaveResponse_src_2fsrr_2eproto.base,
  &scc_info_SaveResponse_MapFeaturesDataEntry_DoNotUse_src_2fsrr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_src_2fsrr_2eproto_once;
static bool descriptor_table_src_2fsrr_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fsrr_2eproto = {
  &descriptor_table_src_2fsrr_2eproto_initialized, descriptor_table_protodef_src_2fsrr_2eproto, "src/srr.proto", 1837,
  &descriptor_table_src_2fsrr_2eproto_once, descriptor_table_src_2fsrr_2eproto_sccs, descriptor_table_src_2fsrr_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_src_2fsrr_2eproto::offsets,
  file_level_metadata_src_2fsrr_2eproto, 19, file_level_enum_descriptors_src_2fsrr_2eproto, file_level_service_descriptors_src_2fsrr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_src_2fsrr_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_src_2fsrr_2eproto), true);
namespace dto {
namespace srr {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_src_2fsrr_2eproto);
  return file_level_enum_descriptors_src_2fsrr_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Feature::InitAsDefaultInstance() {
}
class Feature::_Internal {
 public:
};

Feature::Feature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.Feature)
}

void Feature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Feature_src_2fsrr_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:dto.srr.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feature& Feature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feature_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.Feature.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.Feature.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.Feature.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.Feature.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.Feature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.Feature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Feature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeatureStatus::InitAsDefaultInstance() {
}
class FeatureStatus::_Internal {
 public:
};

FeatureStatus::FeatureStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.FeatureStatus)
}
FeatureStatus::FeatureStatus(const FeatureStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:dto.srr.FeatureStatus)
}

void FeatureStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureStatus_src_2fsrr_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

FeatureStatus::~FeatureStatus() {
  // @@protoc_insertion_point(destructor:dto.srr.FeatureStatus)
  SharedDtor();
}

void FeatureStatus::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FeatureStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureStatus& FeatureStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureStatus_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void FeatureStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.FeatureStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* FeatureStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dto.srr.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::dto::srr::Status>(val));
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.FeatureStatus.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.FeatureStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dto.srr.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.FeatureStatus.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.FeatureStatus)
  return target;
}

size_t FeatureStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.FeatureStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .dto.srr.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.FeatureStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.FeatureStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.FeatureStatus)
    MergeFrom(*source);
  }
}

void FeatureStatus::MergeFrom(const FeatureStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.FeatureStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void FeatureStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.FeatureStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureStatus::CopyFrom(const FeatureStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.FeatureStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureStatus::IsInitialized() const {
  return true;
}

void FeatureStatus::InternalSwap(FeatureStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveQuery::InitAsDefaultInstance() {
}
class SaveQuery::_Internal {
 public:
};

SaveQuery::SaveQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.SaveQuery)
}
SaveQuery::SaveQuery(const SaveQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  passpharse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passpharse().empty()) {
    passpharse_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passpharse_);
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.SaveQuery)
}

void SaveQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveQuery_src_2fsrr_2eproto.base);
  passpharse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SaveQuery::~SaveQuery() {
  // @@protoc_insertion_point(destructor:dto.srr.SaveQuery)
  SharedDtor();
}

void SaveQuery::SharedDtor() {
  passpharse_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveQuery& SaveQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveQuery_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void SaveQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.SaveQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  passpharse_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SaveQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_features();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.SaveQuery.features"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string passpharse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_passpharse();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.SaveQuery.passpharse"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.SaveQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string features = 1;
  for (int i = 0, n = this->_internal_features_size(); i < n; i++) {
    const auto& s = this->_internal_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.SaveQuery.features");
    target = stream->WriteString(1, s, target);
  }

  // string passpharse = 2;
  if (this->passpharse().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passpharse().data(), static_cast<int>(this->_internal_passpharse().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.SaveQuery.passpharse");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passpharse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.SaveQuery)
  return target;
}

size_t SaveQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.SaveQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string features = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(features_.size());
  for (int i = 0, n = features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      features_.Get(i));
  }

  // string passpharse = 2;
  if (this->passpharse().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passpharse());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.SaveQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.SaveQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.SaveQuery)
    MergeFrom(*source);
  }
}

void SaveQuery::MergeFrom(const SaveQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.SaveQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.passpharse().size() > 0) {

    passpharse_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passpharse_);
  }
}

void SaveQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.SaveQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveQuery::CopyFrom(const SaveQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.SaveQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveQuery::IsInitialized() const {
  return true;
}

void SaveQuery::InternalSwap(SaveQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
  passpharse_.Swap(&other->passpharse_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RestoreQuery_MapFeaturesDataEntry_DoNotUse::RestoreQuery_MapFeaturesDataEntry_DoNotUse() {}
RestoreQuery_MapFeaturesDataEntry_DoNotUse::RestoreQuery_MapFeaturesDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RestoreQuery_MapFeaturesDataEntry_DoNotUse::MergeFrom(const RestoreQuery_MapFeaturesDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RestoreQuery_MapFeaturesDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RestoreQuery_MapFeaturesDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RestoreQuery::InitAsDefaultInstance() {
}
class RestoreQuery::_Internal {
 public:
};

RestoreQuery::RestoreQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.RestoreQuery)
}
RestoreQuery::RestoreQuery(const RestoreQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_features_data_.MergeFrom(from.map_features_data_);
  passpharse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passpharse().empty()) {
    passpharse_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passpharse_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.RestoreQuery)
}

void RestoreQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreQuery_src_2fsrr_2eproto.base);
  passpharse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RestoreQuery::~RestoreQuery() {
  // @@protoc_insertion_point(destructor:dto.srr.RestoreQuery)
  SharedDtor();
}

void RestoreQuery::SharedDtor() {
  passpharse_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestoreQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreQuery& RestoreQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreQuery_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void RestoreQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.RestoreQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_features_data_.Clear();
  passpharse_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RestoreQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .dto.srr.Feature> map_features_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_features_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string passpharse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_passpharse();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.RestoreQuery.passpharse"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.RestoreQuery.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.RestoreQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .dto.srr.Feature> map_features_data = 1;
  if (!this->_internal_map_features_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::Feature >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dto.srr.RestoreQuery.MapFeaturesDataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_features_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_features_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::Feature >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::Feature >::const_iterator
          it = this->_internal_map_features_data().begin();
          it != this->_internal_map_features_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RestoreQuery_MapFeaturesDataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::Feature >::const_iterator
          it = this->_internal_map_features_data().begin();
          it != this->_internal_map_features_data().end(); ++it) {
        target = RestoreQuery_MapFeaturesDataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string passpharse = 2;
  if (this->passpharse().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passpharse().data(), static_cast<int>(this->_internal_passpharse().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.RestoreQuery.passpharse");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passpharse(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.RestoreQuery.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.RestoreQuery)
  return target;
}

size_t RestoreQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.RestoreQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .dto.srr.Feature> map_features_data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_features_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::Feature >::const_iterator
      it = this->_internal_map_features_data().begin();
      it != this->_internal_map_features_data().end(); ++it) {
    total_size += RestoreQuery_MapFeaturesDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string passpharse = 2;
  if (this->passpharse().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passpharse());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.RestoreQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.RestoreQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.RestoreQuery)
    MergeFrom(*source);
  }
}

void RestoreQuery::MergeFrom(const RestoreQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.RestoreQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_features_data_.MergeFrom(from.map_features_data_);
  if (from.passpharse().size() > 0) {

    passpharse_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passpharse_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void RestoreQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.RestoreQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreQuery::CopyFrom(const RestoreQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.RestoreQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreQuery::IsInitialized() const {
  return true;
}

void RestoreQuery::InternalSwap(RestoreQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_features_data_.Swap(&other->map_features_data_);
  passpharse_.Swap(&other->passpharse_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetQuery::InitAsDefaultInstance() {
}
class ResetQuery::_Internal {
 public:
};

ResetQuery::ResetQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.ResetQuery)
}
ResetQuery::ResetQuery(const ResetQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.ResetQuery)
}

void ResetQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetQuery_src_2fsrr_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResetQuery::~ResetQuery() {
  // @@protoc_insertion_point(destructor:dto.srr.ResetQuery)
  SharedDtor();
}

void ResetQuery::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetQuery& ResetQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetQuery_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void ResetQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.ResetQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ResetQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_features();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.ResetQuery.features"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.ResetQuery.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.ResetQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string features = 1;
  for (int i = 0, n = this->_internal_features_size(); i < n; i++) {
    const auto& s = this->_internal_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.ResetQuery.features");
    target = stream->WriteString(1, s, target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.ResetQuery.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.ResetQuery)
  return target;
}

size_t ResetQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.ResetQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string features = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(features_.size());
  for (int i = 0, n = features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      features_.Get(i));
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.ResetQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.ResetQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.ResetQuery)
    MergeFrom(*source);
  }
}

void ResetQuery::MergeFrom(const ResetQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.ResetQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void ResetQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.ResetQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetQuery::CopyFrom(const ResetQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.ResetQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetQuery::IsInitialized() const {
  return true;
}

void ResetQuery::InternalSwap(ResetQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListFeatureQuery::InitAsDefaultInstance() {
}
class ListFeatureQuery::_Internal {
 public:
};

ListFeatureQuery::ListFeatureQuery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.ListFeatureQuery)
}
ListFeatureQuery::ListFeatureQuery(const ListFeatureQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dto.srr.ListFeatureQuery)
}

void ListFeatureQuery::SharedCtor() {
}

ListFeatureQuery::~ListFeatureQuery() {
  // @@protoc_insertion_point(destructor:dto.srr.ListFeatureQuery)
  SharedDtor();
}

void ListFeatureQuery::SharedDtor() {
}

void ListFeatureQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListFeatureQuery& ListFeatureQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListFeatureQuery_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void ListFeatureQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.ListFeatureQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListFeatureQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFeatureQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.ListFeatureQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.ListFeatureQuery)
  return target;
}

size_t ListFeatureQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.ListFeatureQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFeatureQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.ListFeatureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ListFeatureQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListFeatureQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.ListFeatureQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.ListFeatureQuery)
    MergeFrom(*source);
  }
}

void ListFeatureQuery::MergeFrom(const ListFeatureQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.ListFeatureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListFeatureQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.ListFeatureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFeatureQuery::CopyFrom(const ListFeatureQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.ListFeatureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFeatureQuery::IsInitialized() const {
  return true;
}

void ListFeatureQuery::InternalSwap(ListFeatureQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFeatureQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Query::InitAsDefaultInstance() {
  ::dto::srr::_Query_default_instance_.save_ = const_cast< ::dto::srr::SaveQuery*>(
      ::dto::srr::SaveQuery::internal_default_instance());
  ::dto::srr::_Query_default_instance_.restore_ = const_cast< ::dto::srr::RestoreQuery*>(
      ::dto::srr::RestoreQuery::internal_default_instance());
  ::dto::srr::_Query_default_instance_.reset_ = const_cast< ::dto::srr::ResetQuery*>(
      ::dto::srr::ResetQuery::internal_default_instance());
  ::dto::srr::_Query_default_instance_.list_feature_ = const_cast< ::dto::srr::ListFeatureQuery*>(
      ::dto::srr::ListFeatureQuery::internal_default_instance());
}
class Query::_Internal {
 public:
  static const ::dto::srr::SaveQuery& save(const Query* msg);
  static const ::dto::srr::RestoreQuery& restore(const Query* msg);
  static const ::dto::srr::ResetQuery& reset(const Query* msg);
  static const ::dto::srr::ListFeatureQuery& list_feature(const Query* msg);
};

const ::dto::srr::SaveQuery&
Query::_Internal::save(const Query* msg) {
  return *msg->parameters_.save_;
}
const ::dto::srr::RestoreQuery&
Query::_Internal::restore(const Query* msg) {
  return *msg->parameters_.restore_;
}
const ::dto::srr::ResetQuery&
Query::_Internal::reset(const Query* msg) {
  return *msg->parameters_.reset_;
}
const ::dto::srr::ListFeatureQuery&
Query::_Internal::list_feature(const Query* msg) {
  return *msg->parameters_.list_feature_;
}
void Query::set_allocated_save(::dto::srr::SaveQuery* save) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_parameters();
  if (save) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      save = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save, submessage_arena);
    }
    set_has_save();
    parameters_.save_ = save;
  }
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Query.save)
}
void Query::set_allocated_restore(::dto::srr::RestoreQuery* restore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_parameters();
  if (restore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      restore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restore, submessage_arena);
    }
    set_has_restore();
    parameters_.restore_ = restore;
  }
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Query.restore)
}
void Query::set_allocated_reset(::dto::srr::ResetQuery* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_parameters();
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    set_has_reset();
    parameters_.reset_ = reset;
  }
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Query.reset)
}
void Query::set_allocated_list_feature(::dto::srr::ListFeatureQuery* list_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_parameters();
  if (list_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_feature, submessage_arena);
    }
    set_has_list_feature();
    parameters_.list_feature_ = list_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Query.list_feature)
}
Query::Query()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_parameters();
  switch (from.parameters_case()) {
    case kSave: {
      _internal_mutable_save()->::dto::srr::SaveQuery::MergeFrom(from._internal_save());
      break;
    }
    case kRestore: {
      _internal_mutable_restore()->::dto::srr::RestoreQuery::MergeFrom(from._internal_restore());
      break;
    }
    case kReset: {
      _internal_mutable_reset()->::dto::srr::ResetQuery::MergeFrom(from._internal_reset());
      break;
    }
    case kListFeature: {
      _internal_mutable_list_feature()->::dto::srr::ListFeatureQuery::MergeFrom(from._internal_list_feature());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.Query)
}

void Query::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Query_src_2fsrr_2eproto.base);
  clear_has_parameters();
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:dto.srr.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  if (has_parameters()) {
    clear_parameters();
  }
}

void Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Query& Query::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Query_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void Query::clear_parameters() {
// @@protoc_insertion_point(one_of_clear_start:dto.srr.Query)
  switch (parameters_case()) {
    case kSave: {
      delete parameters_.save_;
      break;
    }
    case kRestore: {
      delete parameters_.restore_;
      break;
    }
    case kReset: {
      delete parameters_.reset_;
      break;
    }
    case kListFeature: {
      delete parameters_.list_feature_;
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMETERS_NOT_SET;
}


void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_parameters();
  _internal_metadata_.Clear();
}

const char* Query::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dto.srr.SaveQuery save = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_save(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dto.srr.RestoreQuery restore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_restore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dto.srr.ResetQuery reset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dto.srr.ListFeatureQuery list_feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Query::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dto.srr.SaveQuery save = 1;
  if (_internal_has_save()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::save(this), target, stream);
  }

  // .dto.srr.RestoreQuery restore = 2;
  if (_internal_has_restore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::restore(this), target, stream);
  }

  // .dto.srr.ResetQuery reset = 3;
  if (_internal_has_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reset(this), target, stream);
  }

  // .dto.srr.ListFeatureQuery list_feature = 4;
  if (_internal_has_list_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::list_feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.Query)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (parameters_case()) {
    // .dto.srr.SaveQuery save = 1;
    case kSave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.save_);
      break;
    }
    // .dto.srr.RestoreQuery restore = 2;
    case kRestore: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.restore_);
      break;
    }
    // .dto.srr.ResetQuery reset = 3;
    case kReset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.reset_);
      break;
    }
    // .dto.srr.ListFeatureQuery list_feature = 4;
    case kListFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.list_feature_);
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.Query)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.parameters_case()) {
    case kSave: {
      _internal_mutable_save()->::dto::srr::SaveQuery::MergeFrom(from._internal_save());
      break;
    }
    case kRestore: {
      _internal_mutable_restore()->::dto::srr::RestoreQuery::MergeFrom(from._internal_restore());
      break;
    }
    case kReset: {
      _internal_mutable_reset()->::dto::srr::ResetQuery::MergeFrom(from._internal_reset());
      break;
    }
    case kListFeature: {
      _internal_mutable_list_feature()->::dto::srr::ListFeatureQuery::MergeFrom(from._internal_list_feature());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
}

void Query::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(parameters_, other->parameters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeatureAndStatus::InitAsDefaultInstance() {
  ::dto::srr::_FeatureAndStatus_default_instance_._instance.get_mutable()->status_ = const_cast< ::dto::srr::FeatureStatus*>(
      ::dto::srr::FeatureStatus::internal_default_instance());
  ::dto::srr::_FeatureAndStatus_default_instance_._instance.get_mutable()->feature_ = const_cast< ::dto::srr::Feature*>(
      ::dto::srr::Feature::internal_default_instance());
}
class FeatureAndStatus::_Internal {
 public:
  static const ::dto::srr::FeatureStatus& status(const FeatureAndStatus* msg);
  static const ::dto::srr::Feature& feature(const FeatureAndStatus* msg);
};

const ::dto::srr::FeatureStatus&
FeatureAndStatus::_Internal::status(const FeatureAndStatus* msg) {
  return *msg->status_;
}
const ::dto::srr::Feature&
FeatureAndStatus::_Internal::feature(const FeatureAndStatus* msg) {
  return *msg->feature_;
}
FeatureAndStatus::FeatureAndStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.FeatureAndStatus)
}
FeatureAndStatus::FeatureAndStatus(const FeatureAndStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::dto::srr::FeatureStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_feature()) {
    feature_ = new ::dto::srr::Feature(*from.feature_);
  } else {
    feature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.FeatureAndStatus)
}

void FeatureAndStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureAndStatus_src_2fsrr_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_) -
      reinterpret_cast<char*>(&status_)) + sizeof(feature_));
}

FeatureAndStatus::~FeatureAndStatus() {
  // @@protoc_insertion_point(destructor:dto.srr.FeatureAndStatus)
  SharedDtor();
}

void FeatureAndStatus::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete feature_;
}

void FeatureAndStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureAndStatus& FeatureAndStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureAndStatus_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void FeatureAndStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.FeatureAndStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && feature_ != nullptr) {
    delete feature_;
  }
  feature_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FeatureAndStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dto.srr.FeatureStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dto.srr.Feature feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureAndStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.FeatureAndStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dto.srr.FeatureStatus status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .dto.srr.Feature feature = 2;
  if (this->has_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.FeatureAndStatus)
  return target;
}

size_t FeatureAndStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.FeatureAndStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dto.srr.FeatureStatus status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .dto.srr.Feature feature = 2;
  if (this->has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureAndStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.FeatureAndStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureAndStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureAndStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.FeatureAndStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.FeatureAndStatus)
    MergeFrom(*source);
  }
}

void FeatureAndStatus::MergeFrom(const FeatureAndStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.FeatureAndStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::dto::srr::FeatureStatus::MergeFrom(from._internal_status());
  }
  if (from.has_feature()) {
    _internal_mutable_feature()->::dto::srr::Feature::MergeFrom(from._internal_feature());
  }
}

void FeatureAndStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.FeatureAndStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureAndStatus::CopyFrom(const FeatureAndStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.FeatureAndStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureAndStatus::IsInitialized() const {
  return true;
}

void FeatureAndStatus::InternalSwap(FeatureAndStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(feature_, other->feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureAndStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SaveResponse_MapFeaturesDataEntry_DoNotUse::SaveResponse_MapFeaturesDataEntry_DoNotUse() {}
SaveResponse_MapFeaturesDataEntry_DoNotUse::SaveResponse_MapFeaturesDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SaveResponse_MapFeaturesDataEntry_DoNotUse::MergeFrom(const SaveResponse_MapFeaturesDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SaveResponse_MapFeaturesDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SaveResponse_MapFeaturesDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SaveResponse::InitAsDefaultInstance() {
}
class SaveResponse::_Internal {
 public:
};

SaveResponse::SaveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.SaveResponse)
}
SaveResponse::SaveResponse(const SaveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_features_data_.MergeFrom(from.map_features_data_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.SaveResponse)
}

void SaveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveResponse_src_2fsrr_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SaveResponse::~SaveResponse() {
  // @@protoc_insertion_point(destructor:dto.srr.SaveResponse)
  SharedDtor();
}

void SaveResponse::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveResponse& SaveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveResponse_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void SaveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.SaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_features_data_.Clear();
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SaveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .dto.srr.FeatureAndStatus> map_features_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_features_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.SaveResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.SaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .dto.srr.FeatureAndStatus> map_features_data = 1;
  if (!this->_internal_map_features_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureAndStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dto.srr.SaveResponse.MapFeaturesDataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_features_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_features_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureAndStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureAndStatus >::const_iterator
          it = this->_internal_map_features_data().begin();
          it != this->_internal_map_features_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SaveResponse_MapFeaturesDataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureAndStatus >::const_iterator
          it = this->_internal_map_features_data().begin();
          it != this->_internal_map_features_data().end(); ++it) {
        target = SaveResponse_MapFeaturesDataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.SaveResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.SaveResponse)
  return target;
}

size_t SaveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.SaveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .dto.srr.FeatureAndStatus> map_features_data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_features_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureAndStatus >::const_iterator
      it = this->_internal_map_features_data().begin();
      it != this->_internal_map_features_data().end(); ++it) {
    total_size += SaveResponse_MapFeaturesDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.SaveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.SaveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.SaveResponse)
    MergeFrom(*source);
  }
}

void SaveResponse::MergeFrom(const SaveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.SaveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_features_data_.MergeFrom(from.map_features_data_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void SaveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.SaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveResponse::CopyFrom(const SaveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.SaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveResponse::IsInitialized() const {
  return true;
}

void SaveResponse::InternalSwap(SaveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_features_data_.Swap(&other->map_features_data_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RestoreResponse_MapFeaturesStatusEntry_DoNotUse::RestoreResponse_MapFeaturesStatusEntry_DoNotUse() {}
RestoreResponse_MapFeaturesStatusEntry_DoNotUse::RestoreResponse_MapFeaturesStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RestoreResponse_MapFeaturesStatusEntry_DoNotUse::MergeFrom(const RestoreResponse_MapFeaturesStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RestoreResponse_MapFeaturesStatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RestoreResponse_MapFeaturesStatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RestoreResponse::InitAsDefaultInstance() {
}
class RestoreResponse::_Internal {
 public:
};

RestoreResponse::RestoreResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.RestoreResponse)
}
RestoreResponse::RestoreResponse(const RestoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_features_status_.MergeFrom(from.map_features_status_);
  // @@protoc_insertion_point(copy_constructor:dto.srr.RestoreResponse)
}

void RestoreResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreResponse_src_2fsrr_2eproto.base);
}

RestoreResponse::~RestoreResponse() {
  // @@protoc_insertion_point(destructor:dto.srr.RestoreResponse)
  SharedDtor();
}

void RestoreResponse::SharedDtor() {
}

void RestoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreResponse& RestoreResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreResponse_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void RestoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.RestoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_features_status_.Clear();
  _internal_metadata_.Clear();
}

const char* RestoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .dto.srr.FeatureStatus> map_features_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_features_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.RestoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .dto.srr.FeatureStatus> map_features_status = 1;
  if (!this->_internal_map_features_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dto.srr.RestoreResponse.MapFeaturesStatusEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_features_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_features_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::const_iterator
          it = this->_internal_map_features_status().begin();
          it != this->_internal_map_features_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RestoreResponse_MapFeaturesStatusEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::const_iterator
          it = this->_internal_map_features_status().begin();
          it != this->_internal_map_features_status().end(); ++it) {
        target = RestoreResponse_MapFeaturesStatusEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.RestoreResponse)
  return target;
}

size_t RestoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.RestoreResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .dto.srr.FeatureStatus> map_features_status = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_features_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::const_iterator
      it = this->_internal_map_features_status().begin();
      it != this->_internal_map_features_status().end(); ++it) {
    total_size += RestoreResponse_MapFeaturesStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.RestoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.RestoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.RestoreResponse)
    MergeFrom(*source);
  }
}

void RestoreResponse::MergeFrom(const RestoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.RestoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_features_status_.MergeFrom(from.map_features_status_);
}

void RestoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.RestoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreResponse::CopyFrom(const RestoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.RestoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreResponse::IsInitialized() const {
  return true;
}

void RestoreResponse::InternalSwap(RestoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_features_status_.Swap(&other->map_features_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ResetResponse_MapFeaturesStatusEntry_DoNotUse::ResetResponse_MapFeaturesStatusEntry_DoNotUse() {}
ResetResponse_MapFeaturesStatusEntry_DoNotUse::ResetResponse_MapFeaturesStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResetResponse_MapFeaturesStatusEntry_DoNotUse::MergeFrom(const ResetResponse_MapFeaturesStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResetResponse_MapFeaturesStatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ResetResponse_MapFeaturesStatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ResetResponse::InitAsDefaultInstance() {
}
class ResetResponse::_Internal {
 public:
};

ResetResponse::ResetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.ResetResponse)
}
ResetResponse::ResetResponse(const ResetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_features_status_.MergeFrom(from.map_features_status_);
  // @@protoc_insertion_point(copy_constructor:dto.srr.ResetResponse)
}

void ResetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetResponse_src_2fsrr_2eproto.base);
}

ResetResponse::~ResetResponse() {
  // @@protoc_insertion_point(destructor:dto.srr.ResetResponse)
  SharedDtor();
}

void ResetResponse::SharedDtor() {
}

void ResetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetResponse& ResetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetResponse_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void ResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.ResetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_features_status_.Clear();
  _internal_metadata_.Clear();
}

const char* ResetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .dto.srr.FeatureStatus> map_features_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_features_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.ResetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .dto.srr.FeatureStatus> map_features_status = 1;
  if (!this->_internal_map_features_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dto.srr.ResetResponse.MapFeaturesStatusEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_features_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_features_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::const_iterator
          it = this->_internal_map_features_status().begin();
          it != this->_internal_map_features_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ResetResponse_MapFeaturesStatusEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::const_iterator
          it = this->_internal_map_features_status().begin();
          it != this->_internal_map_features_status().end(); ++it) {
        target = ResetResponse_MapFeaturesStatusEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.ResetResponse)
  return target;
}

size_t ResetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.ResetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .dto.srr.FeatureStatus> map_features_status = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_features_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureStatus >::const_iterator
      it = this->_internal_map_features_status().begin();
      it != this->_internal_map_features_status().end(); ++it) {
    total_size += ResetResponse_MapFeaturesStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.ResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.ResetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.ResetResponse)
    MergeFrom(*source);
  }
}

void ResetResponse::MergeFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.ResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_features_status_.MergeFrom(from.map_features_status_);
}

void ResetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetResponse::CopyFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetResponse::IsInitialized() const {
  return true;
}

void ResetResponse::InternalSwap(ResetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_features_status_.Swap(&other->map_features_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeatureDependencies::InitAsDefaultInstance() {
}
class FeatureDependencies::_Internal {
 public:
};

FeatureDependencies::FeatureDependencies()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.FeatureDependencies)
}
FeatureDependencies::FeatureDependencies(const FeatureDependencies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dependencies_(from.dependencies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dto.srr.FeatureDependencies)
}

void FeatureDependencies::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureDependencies_src_2fsrr_2eproto.base);
}

FeatureDependencies::~FeatureDependencies() {
  // @@protoc_insertion_point(destructor:dto.srr.FeatureDependencies)
  SharedDtor();
}

void FeatureDependencies::SharedDtor() {
}

void FeatureDependencies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureDependencies& FeatureDependencies::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureDependencies_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void FeatureDependencies::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.FeatureDependencies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependencies_.Clear();
  _internal_metadata_.Clear();
}

const char* FeatureDependencies::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dependencies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dependencies();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.FeatureDependencies.dependencies"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureDependencies::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.FeatureDependencies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dependencies = 1;
  for (int i = 0, n = this->_internal_dependencies_size(); i < n; i++) {
    const auto& s = this->_internal_dependencies(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.FeatureDependencies.dependencies");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.FeatureDependencies)
  return target;
}

size_t FeatureDependencies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.FeatureDependencies)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dependencies = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dependencies_.size());
  for (int i = 0, n = dependencies_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dependencies_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureDependencies::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.FeatureDependencies)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureDependencies* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureDependencies>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.FeatureDependencies)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.FeatureDependencies)
    MergeFrom(*source);
  }
}

void FeatureDependencies::MergeFrom(const FeatureDependencies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.FeatureDependencies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dependencies_.MergeFrom(from.dependencies_);
}

void FeatureDependencies::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.FeatureDependencies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureDependencies::CopyFrom(const FeatureDependencies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.FeatureDependencies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureDependencies::IsInitialized() const {
  return true;
}

void FeatureDependencies::InternalSwap(FeatureDependencies* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dependencies_.InternalSwap(&other->dependencies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureDependencies::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse() {}
ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::MergeFrom(const ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ListFeatureResponse::InitAsDefaultInstance() {
}
class ListFeatureResponse::_Internal {
 public:
};

ListFeatureResponse::ListFeatureResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.ListFeatureResponse)
}
ListFeatureResponse::ListFeatureResponse(const ListFeatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_features_dependencies_.MergeFrom(from.map_features_dependencies_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.ListFeatureResponse)
}

void ListFeatureResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListFeatureResponse_src_2fsrr_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListFeatureResponse::~ListFeatureResponse() {
  // @@protoc_insertion_point(destructor:dto.srr.ListFeatureResponse)
  SharedDtor();
}

void ListFeatureResponse::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListFeatureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListFeatureResponse& ListFeatureResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListFeatureResponse_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void ListFeatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.ListFeatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_features_dependencies_.Clear();
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListFeatureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .dto.srr.FeatureDependencies> map_features_dependencies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_features_dependencies_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dto.srr.ListFeatureResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListFeatureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.ListFeatureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .dto.srr.FeatureDependencies> map_features_dependencies = 1;
  if (!this->_internal_map_features_dependencies().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureDependencies >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dto.srr.ListFeatureResponse.MapFeaturesDependenciesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_features_dependencies().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_features_dependencies().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureDependencies >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureDependencies >::const_iterator
          it = this->_internal_map_features_dependencies().begin();
          it != this->_internal_map_features_dependencies().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureDependencies >::const_iterator
          it = this->_internal_map_features_dependencies().begin();
          it != this->_internal_map_features_dependencies().end(); ++it) {
        target = ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dto.srr.ListFeatureResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.ListFeatureResponse)
  return target;
}

size_t ListFeatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.ListFeatureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .dto.srr.FeatureDependencies> map_features_dependencies = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_features_dependencies_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dto::srr::FeatureDependencies >::const_iterator
      it = this->_internal_map_features_dependencies().begin();
      it != this->_internal_map_features_dependencies().end(); ++it) {
    total_size += ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFeatureResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.ListFeatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListFeatureResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListFeatureResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.ListFeatureResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.ListFeatureResponse)
    MergeFrom(*source);
  }
}

void ListFeatureResponse::MergeFrom(const ListFeatureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.ListFeatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_features_dependencies_.MergeFrom(from.map_features_dependencies_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void ListFeatureResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.ListFeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListFeatureResponse::CopyFrom(const ListFeatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.ListFeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFeatureResponse::IsInitialized() const {
  return true;
}

void ListFeatureResponse::InternalSwap(ListFeatureResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_features_dependencies_.Swap(&other->map_features_dependencies_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListFeatureResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::dto::srr::_Response_default_instance_.save_ = const_cast< ::dto::srr::SaveResponse*>(
      ::dto::srr::SaveResponse::internal_default_instance());
  ::dto::srr::_Response_default_instance_.restore_ = const_cast< ::dto::srr::RestoreResponse*>(
      ::dto::srr::RestoreResponse::internal_default_instance());
  ::dto::srr::_Response_default_instance_.reset_ = const_cast< ::dto::srr::ResetResponse*>(
      ::dto::srr::ResetResponse::internal_default_instance());
  ::dto::srr::_Response_default_instance_.list_feature_ = const_cast< ::dto::srr::ListFeatureResponse*>(
      ::dto::srr::ListFeatureResponse::internal_default_instance());
}
class Response::_Internal {
 public:
  static const ::dto::srr::SaveResponse& save(const Response* msg);
  static const ::dto::srr::RestoreResponse& restore(const Response* msg);
  static const ::dto::srr::ResetResponse& reset(const Response* msg);
  static const ::dto::srr::ListFeatureResponse& list_feature(const Response* msg);
};

const ::dto::srr::SaveResponse&
Response::_Internal::save(const Response* msg) {
  return *msg->parameters_.save_;
}
const ::dto::srr::RestoreResponse&
Response::_Internal::restore(const Response* msg) {
  return *msg->parameters_.restore_;
}
const ::dto::srr::ResetResponse&
Response::_Internal::reset(const Response* msg) {
  return *msg->parameters_.reset_;
}
const ::dto::srr::ListFeatureResponse&
Response::_Internal::list_feature(const Response* msg) {
  return *msg->parameters_.list_feature_;
}
void Response::set_allocated_save(::dto::srr::SaveResponse* save) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_parameters();
  if (save) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      save = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save, submessage_arena);
    }
    set_has_save();
    parameters_.save_ = save;
  }
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Response.save)
}
void Response::set_allocated_restore(::dto::srr::RestoreResponse* restore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_parameters();
  if (restore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      restore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restore, submessage_arena);
    }
    set_has_restore();
    parameters_.restore_ = restore;
  }
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Response.restore)
}
void Response::set_allocated_reset(::dto::srr::ResetResponse* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_parameters();
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    set_has_reset();
    parameters_.reset_ = reset;
  }
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Response.reset)
}
void Response::set_allocated_list_feature(::dto::srr::ListFeatureResponse* list_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_parameters();
  if (list_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_feature, submessage_arena);
    }
    set_has_list_feature();
    parameters_.list_feature_ = list_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:dto.srr.Response.list_feature)
}
Response::Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dto.srr.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_parameters();
  switch (from.parameters_case()) {
    case kSave: {
      _internal_mutable_save()->::dto::srr::SaveResponse::MergeFrom(from._internal_save());
      break;
    }
    case kRestore: {
      _internal_mutable_restore()->::dto::srr::RestoreResponse::MergeFrom(from._internal_restore());
      break;
    }
    case kReset: {
      _internal_mutable_reset()->::dto::srr::ResetResponse::MergeFrom(from._internal_reset());
      break;
    }
    case kListFeature: {
      _internal_mutable_list_feature()->::dto::srr::ListFeatureResponse::MergeFrom(from._internal_list_feature());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dto.srr.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_src_2fsrr_2eproto.base);
  clear_has_parameters();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:dto.srr.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_parameters()) {
    clear_parameters();
  }
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_src_2fsrr_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_parameters() {
// @@protoc_insertion_point(one_of_clear_start:dto.srr.Response)
  switch (parameters_case()) {
    case kSave: {
      delete parameters_.save_;
      break;
    }
    case kRestore: {
      delete parameters_.restore_;
      break;
    }
    case kReset: {
      delete parameters_.reset_;
      break;
    }
    case kListFeature: {
      delete parameters_.list_feature_;
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMETERS_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:dto.srr.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_parameters();
  _internal_metadata_.Clear();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dto.srr.SaveResponse save = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_save(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dto.srr.RestoreResponse restore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_restore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dto.srr.ResetResponse reset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dto.srr.ListFeatureResponse list_feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dto.srr.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dto.srr.SaveResponse save = 1;
  if (_internal_has_save()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::save(this), target, stream);
  }

  // .dto.srr.RestoreResponse restore = 2;
  if (_internal_has_restore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::restore(this), target, stream);
  }

  // .dto.srr.ResetResponse reset = 3;
  if (_internal_has_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reset(this), target, stream);
  }

  // .dto.srr.ListFeatureResponse list_feature = 4;
  if (_internal_has_list_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::list_feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dto.srr.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dto.srr.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (parameters_case()) {
    // .dto.srr.SaveResponse save = 1;
    case kSave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.save_);
      break;
    }
    // .dto.srr.RestoreResponse restore = 2;
    case kRestore: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.restore_);
      break;
    }
    // .dto.srr.ResetResponse reset = 3;
    case kReset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.reset_);
      break;
    }
    // .dto.srr.ListFeatureResponse list_feature = 4;
    case kListFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_.list_feature_);
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dto.srr.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dto.srr.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dto.srr.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dto.srr.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.parameters_case()) {
    case kSave: {
      _internal_mutable_save()->::dto::srr::SaveResponse::MergeFrom(from._internal_save());
      break;
    }
    case kRestore: {
      _internal_mutable_restore()->::dto::srr::RestoreResponse::MergeFrom(from._internal_restore());
      break;
    }
    case kReset: {
      _internal_mutable_reset()->::dto::srr::ResetResponse::MergeFrom(from._internal_reset());
      break;
    }
    case kListFeature: {
      _internal_mutable_list_feature()->::dto::srr::ListFeatureResponse::MergeFrom(from._internal_list_feature());
      break;
    }
    case PARAMETERS_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dto.srr.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dto.srr.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(parameters_, other->parameters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srr
}  // namespace dto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dto::srr::Feature* Arena::CreateMaybeMessage< ::dto::srr::Feature >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::FeatureStatus* Arena::CreateMaybeMessage< ::dto::srr::FeatureStatus >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::FeatureStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::SaveQuery* Arena::CreateMaybeMessage< ::dto::srr::SaveQuery >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::SaveQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::RestoreQuery_MapFeaturesDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::RestoreQuery* Arena::CreateMaybeMessage< ::dto::srr::RestoreQuery >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::RestoreQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::ResetQuery* Arena::CreateMaybeMessage< ::dto::srr::ResetQuery >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::ResetQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::ListFeatureQuery* Arena::CreateMaybeMessage< ::dto::srr::ListFeatureQuery >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::ListFeatureQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::Query* Arena::CreateMaybeMessage< ::dto::srr::Query >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::FeatureAndStatus* Arena::CreateMaybeMessage< ::dto::srr::FeatureAndStatus >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::FeatureAndStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::SaveResponse_MapFeaturesDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::SaveResponse* Arena::CreateMaybeMessage< ::dto::srr::SaveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::SaveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::RestoreResponse_MapFeaturesStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::RestoreResponse* Arena::CreateMaybeMessage< ::dto::srr::RestoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::RestoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::ResetResponse_MapFeaturesStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::ResetResponse* Arena::CreateMaybeMessage< ::dto::srr::ResetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::ResetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::FeatureDependencies* Arena::CreateMaybeMessage< ::dto::srr::FeatureDependencies >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::FeatureDependencies >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse* Arena::CreateMaybeMessage< ::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::ListFeatureResponse_MapFeaturesDependenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::ListFeatureResponse* Arena::CreateMaybeMessage< ::dto::srr::ListFeatureResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::ListFeatureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dto::srr::Response* Arena::CreateMaybeMessage< ::dto::srr::Response >(Arena* arena) {
  return Arena::CreateInternal< ::dto::srr::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
